{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport BigNumber from \"bignumber.js\";\nimport { ethers } from \"ethers\";\nBigNumber.config({\n  EXPONENTIAL_AT: 1000,\n  DECIMAL_PLACES: 80\n});\nvar GAS_LIMIT = {\n  STAKING: {\n    DEFAULT: 200000,\n    SNX: 850000\n  }\n};\nexport var getMasterChefAddress = function getMasterChefAddress(sushi) {\n  return sushi && sushi.masterChefAddress;\n};\nexport var getSushiAddress = function getSushiAddress(sushi) {\n  return sushi && sushi.sushiAddress;\n};\nexport var getWethContract = function getWethContract(sushi) {\n  return sushi && sushi.contracts && sushi.contracts.weth;\n};\nexport var getMasterChefContract = function getMasterChefContract(sushi) {\n  return sushi && sushi.contracts && sushi.contracts.masterChef;\n};\nexport var getSushiContract = function getSushiContract(sushi) {\n  return sushi && sushi.contracts && sushi.contracts.sushi;\n};\nexport var getFarms = function getFarms(sushi) {\n  return sushi ? sushi.contracts.pools.map(function (_ref) {\n    var pid = _ref.pid,\n        name = _ref.name,\n        symbol = _ref.symbol,\n        icon = _ref.icon,\n        tokenAddress = _ref.tokenAddress,\n        tokenSymbol = _ref.tokenSymbol,\n        tokenContract = _ref.tokenContract,\n        lpAddress = _ref.lpAddress,\n        lpContract = _ref.lpContract;\n    return {\n      pid: pid,\n      id: symbol,\n      name: name,\n      lpToken: symbol,\n      lpTokenAddress: lpAddress,\n      lpContract: lpContract,\n      tokenAddress: tokenAddress,\n      tokenSymbol: tokenSymbol,\n      tokenContract: tokenContract,\n      earnToken: \"sushi\",\n      earnTokenAddress: sushi.contracts.sushi.options.address,\n      icon: icon\n    };\n  }) : [];\n};\nexport var getPoolWeight = /*#__PURE__*/function () {\n  var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(masterChefContract, pid) {\n    var _yield$masterChefCont, allocPoint, totalAllocPoint;\n\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return masterChefContract.methods.poolInfo(pid).call();\n\n          case 2:\n            _yield$masterChefCont = _context.sent;\n            allocPoint = _yield$masterChefCont.allocPoint;\n            _context.next = 6;\n            return masterChefContract.methods.totalAllocPoint().call();\n\n          case 6:\n            totalAllocPoint = _context.sent;\n            return _context.abrupt(\"return\", new BigNumber(allocPoint).div(new BigNumber(totalAllocPoint)));\n\n          case 8:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function getPoolWeight(_x, _x2) {\n    return _ref2.apply(this, arguments);\n  };\n}();\nexport var getEarned = /*#__PURE__*/function () {\n  var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(masterChefContract, pid, account) {\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            return _context2.abrupt(\"return\", masterChefContract.methods.pendingSushi(pid, account).call());\n\n          case 1:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n\n  return function getEarned(_x3, _x4, _x5) {\n    return _ref3.apply(this, arguments);\n  };\n}();\nexport var getTotalLPWethValue = /*#__PURE__*/function () {\n  var _ref4 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(masterChefContract, wethContract, lpContract, tokenContract, pid) {\n    var tokenAmountWholeLP, tokenDecimals, balance, totalSupply, lpContractWeth, portionLp, lpWethWorth, totalLpWethValue, tokenAmount, wethAmount;\n    return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            _context3.next = 2;\n            return tokenContract.methods.balanceOf(lpContract.options.address).call();\n\n          case 2:\n            tokenAmountWholeLP = _context3.sent;\n            _context3.next = 5;\n            return tokenContract.methods.decimals().call();\n\n          case 5:\n            tokenDecimals = _context3.sent;\n            _context3.next = 8;\n            return lpContract.methods.balanceOf(masterChefContract.options.address).call();\n\n          case 8:\n            balance = _context3.sent;\n            _context3.next = 11;\n            return lpContract.methods.totalSupply().call();\n\n          case 11:\n            totalSupply = _context3.sent;\n            _context3.next = 14;\n            return wethContract.methods.balanceOf(lpContract.options.address).call();\n\n          case 14:\n            lpContractWeth = _context3.sent;\n            // Return p1 * w1 * 2\n            portionLp = new BigNumber(balance).div(new BigNumber(totalSupply));\n            lpWethWorth = new BigNumber(lpContractWeth);\n            totalLpWethValue = portionLp.times(lpWethWorth).times(new BigNumber(2));\n            console.log(totalLpWethValue); // Calculate\n\n            tokenAmount = new BigNumber(tokenAmountWholeLP).times(portionLp).div(new BigNumber(10).pow(tokenDecimals));\n            wethAmount = new BigNumber(lpContractWeth).times(portionLp).div(new BigNumber(10).pow(18));\n            console.log(totalLpWethValue.div(new BigNumber(10).pow(18)));\n            _context3.t0 = tokenAmount;\n            _context3.t1 = wethAmount;\n            _context3.t2 = totalLpWethValue.div(new BigNumber(10).pow(18));\n            _context3.t3 = wethAmount.div(tokenAmount);\n            _context3.next = 28;\n            return getPoolWeight(masterChefContract, pid);\n\n          case 28:\n            _context3.t4 = _context3.sent;\n            return _context3.abrupt(\"return\", {\n              tokenAmount: _context3.t0,\n              wethAmount: _context3.t1,\n              totalWethValue: _context3.t2,\n              tokenPriceInWeth: _context3.t3,\n              poolWeight: _context3.t4\n            });\n\n          case 30:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, _callee3);\n  }));\n\n  return function getTotalLPWethValue(_x6, _x7, _x8, _x9, _x10) {\n    return _ref4.apply(this, arguments);\n  };\n}();\nexport var approve = /*#__PURE__*/function () {\n  var _ref5 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(lpContract, masterChefContract, account) {\n    return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n      while (1) {\n        switch (_context4.prev = _context4.next) {\n          case 0:\n            return _context4.abrupt(\"return\", lpContract.methods.approve(masterChefContract.options.address, ethers.constants.MaxUint256).send({\n              from: account\n            }));\n\n          case 1:\n          case \"end\":\n            return _context4.stop();\n        }\n      }\n    }, _callee4);\n  }));\n\n  return function approve(_x11, _x12, _x13) {\n    return _ref5.apply(this, arguments);\n  };\n}();\nexport var getSushiSupply = /*#__PURE__*/function () {\n  var _ref6 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5(sushi) {\n    return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n      while (1) {\n        switch (_context5.prev = _context5.next) {\n          case 0:\n            _context5.t0 = BigNumber;\n            _context5.next = 3;\n            return sushi.contracts.sushi.methods.totalSupply().call();\n\n          case 3:\n            _context5.t1 = _context5.sent;\n            return _context5.abrupt(\"return\", new _context5.t0(_context5.t1));\n\n          case 5:\n          case \"end\":\n            return _context5.stop();\n        }\n      }\n    }, _callee5);\n  }));\n\n  return function getSushiSupply(_x14) {\n    return _ref6.apply(this, arguments);\n  };\n}();\nexport var stake = /*#__PURE__*/function () {\n  var _ref7 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee6(masterChefContract, pid, amount, account) {\n    return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n      while (1) {\n        switch (_context6.prev = _context6.next) {\n          case 0:\n            return _context6.abrupt(\"return\", masterChefContract.methods.deposit(pid, new BigNumber(amount).times(new BigNumber(10).pow(18)).toString()).send({\n              from: account\n            }).on(\"transactionHash\", function (tx) {\n              console.log(tx);\n              return tx.transactionHash;\n            }));\n\n          case 1:\n          case \"end\":\n            return _context6.stop();\n        }\n      }\n    }, _callee6);\n  }));\n\n  return function stake(_x15, _x16, _x17, _x18) {\n    return _ref7.apply(this, arguments);\n  };\n}();\nexport var unstake = /*#__PURE__*/function () {\n  var _ref8 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee7(masterChefContract, pid, amount, account) {\n    return _regeneratorRuntime.wrap(function _callee7$(_context7) {\n      while (1) {\n        switch (_context7.prev = _context7.next) {\n          case 0:\n            return _context7.abrupt(\"return\", masterChefContract.methods.withdraw(pid, new BigNumber(amount).times(new BigNumber(10).pow(18)).toString()).send({\n              from: account\n            }).on(\"transactionHash\", function (tx) {\n              console.log(tx);\n              return tx.transactionHash;\n            }));\n\n          case 1:\n          case \"end\":\n            return _context7.stop();\n        }\n      }\n    }, _callee7);\n  }));\n\n  return function unstake(_x19, _x20, _x21, _x22) {\n    return _ref8.apply(this, arguments);\n  };\n}();\nexport var harvest = /*#__PURE__*/function () {\n  var _ref9 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee8(masterChefContract, pid, account) {\n    return _regeneratorRuntime.wrap(function _callee8$(_context8) {\n      while (1) {\n        switch (_context8.prev = _context8.next) {\n          case 0:\n            return _context8.abrupt(\"return\", masterChefContract.methods.deposit(pid, \"0\").send({\n              from: account\n            }).on(\"transactionHash\", function (tx) {\n              console.log(tx);\n              return tx.transactionHash;\n            }));\n\n          case 1:\n          case \"end\":\n            return _context8.stop();\n        }\n      }\n    }, _callee8);\n  }));\n\n  return function harvest(_x23, _x24, _x25) {\n    return _ref9.apply(this, arguments);\n  };\n}();\nexport var getStaked = /*#__PURE__*/function () {\n  var _ref10 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee9(masterChefContract, pid, account) {\n    var _yield$masterChefCont2, amount;\n\n    return _regeneratorRuntime.wrap(function _callee9$(_context9) {\n      while (1) {\n        switch (_context9.prev = _context9.next) {\n          case 0:\n            _context9.prev = 0;\n            _context9.next = 3;\n            return masterChefContract.methods.userInfo(pid, account).call();\n\n          case 3:\n            _yield$masterChefCont2 = _context9.sent;\n            amount = _yield$masterChefCont2.amount;\n            return _context9.abrupt(\"return\", new BigNumber(amount));\n\n          case 8:\n            _context9.prev = 8;\n            _context9.t0 = _context9[\"catch\"](0);\n            return _context9.abrupt(\"return\", new BigNumber(0));\n\n          case 11:\n          case \"end\":\n            return _context9.stop();\n        }\n      }\n    }, _callee9, null, [[0, 8]]);\n  }));\n\n  return function getStaked(_x26, _x27, _x28) {\n    return _ref10.apply(this, arguments);\n  };\n}();\nexport var redeem = /*#__PURE__*/function () {\n  var _ref11 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee10(masterChefContract, account) {\n    var now;\n    return _regeneratorRuntime.wrap(function _callee10$(_context10) {\n      while (1) {\n        switch (_context10.prev = _context10.next) {\n          case 0:\n            now = new Date().getTime() / 1000;\n\n            if (!(now >= 1597172400)) {\n              _context10.next = 5;\n              break;\n            }\n\n            return _context10.abrupt(\"return\", masterChefContract.methods.exit().send({\n              from: account\n            }).on(\"transactionHash\", function (tx) {\n              console.log(tx);\n              return tx.transactionHash;\n            }));\n\n          case 5:\n            alert(\"pool not active\");\n\n          case 6:\n          case \"end\":\n            return _context10.stop();\n        }\n      }\n    }, _callee10);\n  }));\n\n  return function redeem(_x29, _x30) {\n    return _ref11.apply(this, arguments);\n  };\n}();","map":{"version":3,"sources":["/Users/theo/frontend/sushi/utils.js"],"names":["BigNumber","ethers","config","EXPONENTIAL_AT","DECIMAL_PLACES","GAS_LIMIT","STAKING","DEFAULT","SNX","getMasterChefAddress","sushi","masterChefAddress","getSushiAddress","sushiAddress","getWethContract","contracts","weth","getMasterChefContract","masterChef","getSushiContract","getFarms","pools","map","pid","name","symbol","icon","tokenAddress","tokenSymbol","tokenContract","lpAddress","lpContract","id","lpToken","lpTokenAddress","earnToken","earnTokenAddress","options","address","getPoolWeight","masterChefContract","methods","poolInfo","call","allocPoint","totalAllocPoint","div","getEarned","account","pendingSushi","getTotalLPWethValue","wethContract","balanceOf","tokenAmountWholeLP","decimals","tokenDecimals","balance","totalSupply","lpContractWeth","portionLp","lpWethWorth","totalLpWethValue","times","console","log","tokenAmount","pow","wethAmount","totalWethValue","tokenPriceInWeth","poolWeight","approve","constants","MaxUint256","send","from","getSushiSupply","stake","amount","deposit","toString","on","tx","transactionHash","unstake","withdraw","harvest","getStaked","userInfo","redeem","now","Date","getTime","exit","alert"],"mappings":";;AAAA,OAAOA,SAAP,MAAsB,cAAtB;AACA,SAASC,MAAT,QAAuB,QAAvB;AAEAD,SAAS,CAACE,MAAV,CAAiB;AACfC,EAAAA,cAAc,EAAE,IADD;AAEfC,EAAAA,cAAc,EAAE;AAFD,CAAjB;AAKA,IAAMC,SAAS,GAAG;AAChBC,EAAAA,OAAO,EAAE;AACPC,IAAAA,OAAO,EAAE,MADF;AAEPC,IAAAA,GAAG,EAAE;AAFE;AADO,CAAlB;AAOA,OAAO,IAAMC,oBAAoB,GAAG,SAAvBA,oBAAuB,CAACC,KAAD,EAAW;AAC7C,SAAOA,KAAK,IAAIA,KAAK,CAACC,iBAAtB;AACD,CAFM;AAGP,OAAO,IAAMC,eAAe,GAAG,SAAlBA,eAAkB,CAACF,KAAD,EAAW;AACxC,SAAOA,KAAK,IAAIA,KAAK,CAACG,YAAtB;AACD,CAFM;AAGP,OAAO,IAAMC,eAAe,GAAG,SAAlBA,eAAkB,CAACJ,KAAD,EAAW;AACxC,SAAOA,KAAK,IAAIA,KAAK,CAACK,SAAf,IAA4BL,KAAK,CAACK,SAAN,CAAgBC,IAAnD;AACD,CAFM;AAIP,OAAO,IAAMC,qBAAqB,GAAG,SAAxBA,qBAAwB,CAACP,KAAD,EAAW;AAC9C,SAAOA,KAAK,IAAIA,KAAK,CAACK,SAAf,IAA4BL,KAAK,CAACK,SAAN,CAAgBG,UAAnD;AACD,CAFM;AAGP,OAAO,IAAMC,gBAAgB,GAAG,SAAnBA,gBAAmB,CAACT,KAAD,EAAW;AACzC,SAAOA,KAAK,IAAIA,KAAK,CAACK,SAAf,IAA4BL,KAAK,CAACK,SAAN,CAAgBL,KAAnD;AACD,CAFM;AAIP,OAAO,IAAMU,QAAQ,GAAG,SAAXA,QAAW,CAACV,KAAD,EAAW;AACjC,SAAOA,KAAK,GACRA,KAAK,CAACK,SAAN,CAAgBM,KAAhB,CAAsBC,GAAtB,CACE;AAAA,QACEC,GADF,QACEA,GADF;AAAA,QAEEC,IAFF,QAEEA,IAFF;AAAA,QAGEC,MAHF,QAGEA,MAHF;AAAA,QAIEC,IAJF,QAIEA,IAJF;AAAA,QAKEC,YALF,QAKEA,YALF;AAAA,QAMEC,WANF,QAMEA,WANF;AAAA,QAOEC,aAPF,QAOEA,aAPF;AAAA,QAQEC,SARF,QAQEA,SARF;AAAA,QASEC,UATF,QASEA,UATF;AAAA,WAUO;AACLR,MAAAA,GAAG,EAAHA,GADK;AAELS,MAAAA,EAAE,EAAEP,MAFC;AAGLD,MAAAA,IAAI,EAAJA,IAHK;AAILS,MAAAA,OAAO,EAAER,MAJJ;AAKLS,MAAAA,cAAc,EAAEJ,SALX;AAMLC,MAAAA,UAAU,EAAVA,UANK;AAOLJ,MAAAA,YAAY,EAAZA,YAPK;AAQLC,MAAAA,WAAW,EAAXA,WARK;AASLC,MAAAA,aAAa,EAAbA,aATK;AAULM,MAAAA,SAAS,EAAE,OAVN;AAWLC,MAAAA,gBAAgB,EAAE1B,KAAK,CAACK,SAAN,CAAgBL,KAAhB,CAAsB2B,OAAtB,CAA8BC,OAX3C;AAYLZ,MAAAA,IAAI,EAAJA;AAZK,KAVP;AAAA,GADF,CADQ,GA2BR,EA3BJ;AA4BD,CA7BM;AA+BP,OAAO,IAAMa,aAAa;AAAA,uEAAG,iBAAOC,kBAAP,EAA2BjB,GAA3B;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACEiB,kBAAkB,CAACC,OAAnB,CAA2BC,QAA3B,CAAoCnB,GAApC,EAAyCoB,IAAzC,EADF;;AAAA;AAAA;AACnBC,YAAAA,UADmB,yBACnBA,UADmB;AAAA;AAAA,mBAEGJ,kBAAkB,CAACC,OAAnB,CAC3BI,eAD2B,GAE3BF,IAF2B,EAFH;;AAAA;AAErBE,YAAAA,eAFqB;AAAA,6CAKpB,IAAI7C,SAAJ,CAAc4C,UAAd,EAA0BE,GAA1B,CAA8B,IAAI9C,SAAJ,CAAc6C,eAAd,CAA9B,CALoB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAbN,aAAa;AAAA;AAAA;AAAA,GAAnB;AAQP,OAAO,IAAMQ,SAAS;AAAA,uEAAG,kBAAOP,kBAAP,EAA2BjB,GAA3B,EAAgCyB,OAAhC;AAAA;AAAA;AAAA;AAAA;AAAA,8CAChBR,kBAAkB,CAACC,OAAnB,CAA2BQ,YAA3B,CAAwC1B,GAAxC,EAA6CyB,OAA7C,EAAsDL,IAAtD,EADgB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAATI,SAAS;AAAA;AAAA;AAAA,GAAf;AAIP,OAAO,IAAMG,mBAAmB;AAAA,uEAAG,kBACjCV,kBADiC,EAEjCW,YAFiC,EAGjCpB,UAHiC,EAIjCF,aAJiC,EAKjCN,GALiC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAQAM,aAAa,CAACY,OAAd,CAC9BW,SAD8B,CACpBrB,UAAU,CAACM,OAAX,CAAmBC,OADC,EAE9BK,IAF8B,EARA;;AAAA;AAQ3BU,YAAAA,kBAR2B;AAAA;AAAA,mBAWLxB,aAAa,CAACY,OAAd,CAAsBa,QAAtB,GAAiCX,IAAjC,EAXK;;AAAA;AAW3BY,YAAAA,aAX2B;AAAA;AAAA,mBAaXxB,UAAU,CAACU,OAAX,CACnBW,SADmB,CACTZ,kBAAkB,CAACH,OAAnB,CAA2BC,OADlB,EAEnBK,IAFmB,EAbW;;AAAA;AAa3Ba,YAAAA,OAb2B;AAAA;AAAA,mBAiBPzB,UAAU,CAACU,OAAX,CAAmBgB,WAAnB,GAAiCd,IAAjC,EAjBO;;AAAA;AAiB3Bc,YAAAA,WAjB2B;AAAA;AAAA,mBAmBJN,YAAY,CAACV,OAAb,CAC1BW,SAD0B,CAChBrB,UAAU,CAACM,OAAX,CAAmBC,OADH,EAE1BK,IAF0B,EAnBI;;AAAA;AAmB3Be,YAAAA,cAnB2B;AAuBjC;AACMC,YAAAA,SAxB2B,GAwBf,IAAI3D,SAAJ,CAAcwD,OAAd,EAAuBV,GAAvB,CAA2B,IAAI9C,SAAJ,CAAcyD,WAAd,CAA3B,CAxBe;AAyB3BG,YAAAA,WAzB2B,GAyBb,IAAI5D,SAAJ,CAAc0D,cAAd,CAzBa;AA0B3BG,YAAAA,gBA1B2B,GA0BRF,SAAS,CAACG,KAAV,CAAgBF,WAAhB,EAA6BE,KAA7B,CAAmC,IAAI9D,SAAJ,CAAc,CAAd,CAAnC,CA1BQ;AA4BjC+D,YAAAA,OAAO,CAACC,GAAR,CAAYH,gBAAZ,EA5BiC,CA8BjC;;AACMI,YAAAA,WA/B2B,GA+Bb,IAAIjE,SAAJ,CAAcqD,kBAAd,EACjBS,KADiB,CACXH,SADW,EAEjBb,GAFiB,CAEb,IAAI9C,SAAJ,CAAc,EAAd,EAAkBkE,GAAlB,CAAsBX,aAAtB,CAFa,CA/Ba;AAmC3BY,YAAAA,UAnC2B,GAmCd,IAAInE,SAAJ,CAAc0D,cAAd,EAChBI,KADgB,CACVH,SADU,EAEhBb,GAFgB,CAEZ,IAAI9C,SAAJ,CAAc,EAAd,EAAkBkE,GAAlB,CAAsB,EAAtB,CAFY,CAnCc;AAuCjCH,YAAAA,OAAO,CAACC,GAAR,CAAYH,gBAAgB,CAACf,GAAjB,CAAqB,IAAI9C,SAAJ,CAAc,EAAd,EAAkBkE,GAAlB,CAAsB,EAAtB,CAArB,CAAZ;AAvCiC,2BA0C/BD,WA1C+B;AAAA,2BA2C/BE,UA3C+B;AAAA,2BA4CfN,gBAAgB,CAACf,GAAjB,CAAqB,IAAI9C,SAAJ,CAAc,EAAd,EAAkBkE,GAAlB,CAAsB,EAAtB,CAArB,CA5Ce;AAAA,2BA6CbC,UAAU,CAACrB,GAAX,CAAemB,WAAf,CA7Ca;AAAA;AAAA,mBA8Cb1B,aAAa,CAACC,kBAAD,EAAqBjB,GAArB,CA9CA;;AAAA;AAAA;AAAA;AA0C/B0C,cAAAA,WA1C+B;AA2C/BE,cAAAA,UA3C+B;AA4C/BC,cAAAA,cA5C+B;AA6C/BC,cAAAA,gBA7C+B;AA8C/BC,cAAAA,UA9C+B;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAnBpB,mBAAmB;AAAA;AAAA;AAAA,GAAzB;AAkDP,OAAO,IAAMqB,OAAO;AAAA,uEAAG,kBAAOxC,UAAP,EAAmBS,kBAAnB,EAAuCQ,OAAvC;AAAA;AAAA;AAAA;AAAA;AAAA,8CACdjB,UAAU,CAACU,OAAX,CACJ8B,OADI,CACI/B,kBAAkB,CAACH,OAAnB,CAA2BC,OAD/B,EACwCrC,MAAM,CAACuE,SAAP,CAAiBC,UADzD,EAEJC,IAFI,CAEC;AAAEC,cAAAA,IAAI,EAAE3B;AAAR,aAFD,CADc;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAPuB,OAAO;AAAA;AAAA;AAAA,GAAb;AAMP,OAAO,IAAMK,cAAc;AAAA,uEAAG,kBAAOlE,KAAP;AAAA;AAAA;AAAA;AAAA;AAAA,2BACjBV,SADiB;AAAA;AAAA,mBAEpBU,KAAK,CAACK,SAAN,CAAgBL,KAAhB,CAAsB+B,OAAtB,CAA8BgB,WAA9B,GAA4Cd,IAA5C,EAFoB;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAdiC,cAAc;AAAA;AAAA;AAAA,GAApB;AAMP,OAAO,IAAMC,KAAK;AAAA,uEAAG,kBAAOrC,kBAAP,EAA2BjB,GAA3B,EAAgCuD,MAAhC,EAAwC9B,OAAxC;AAAA;AAAA;AAAA;AAAA;AAAA,8CACZR,kBAAkB,CAACC,OAAnB,CACJsC,OADI,CAEHxD,GAFG,EAGH,IAAIvB,SAAJ,CAAc8E,MAAd,EAAsBhB,KAAtB,CAA4B,IAAI9D,SAAJ,CAAc,EAAd,EAAkBkE,GAAlB,CAAsB,EAAtB,CAA5B,EAAuDc,QAAvD,EAHG,EAKJN,IALI,CAKC;AAAEC,cAAAA,IAAI,EAAE3B;AAAR,aALD,EAMJiC,EANI,CAMD,iBANC,EAMkB,UAACC,EAAD,EAAQ;AAC7BnB,cAAAA,OAAO,CAACC,GAAR,CAAYkB,EAAZ;AACA,qBAAOA,EAAE,CAACC,eAAV;AACD,aATI,CADY;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAALN,KAAK;AAAA;AAAA;AAAA,GAAX;AAaP,OAAO,IAAMO,OAAO;AAAA,uEAAG,kBAAO5C,kBAAP,EAA2BjB,GAA3B,EAAgCuD,MAAhC,EAAwC9B,OAAxC;AAAA;AAAA;AAAA;AAAA;AAAA,8CACdR,kBAAkB,CAACC,OAAnB,CACJ4C,QADI,CAEH9D,GAFG,EAGH,IAAIvB,SAAJ,CAAc8E,MAAd,EAAsBhB,KAAtB,CAA4B,IAAI9D,SAAJ,CAAc,EAAd,EAAkBkE,GAAlB,CAAsB,EAAtB,CAA5B,EAAuDc,QAAvD,EAHG,EAKJN,IALI,CAKC;AAAEC,cAAAA,IAAI,EAAE3B;AAAR,aALD,EAMJiC,EANI,CAMD,iBANC,EAMkB,UAACC,EAAD,EAAQ;AAC7BnB,cAAAA,OAAO,CAACC,GAAR,CAAYkB,EAAZ;AACA,qBAAOA,EAAE,CAACC,eAAV;AACD,aATI,CADc;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAPC,OAAO;AAAA;AAAA;AAAA,GAAb;AAYP,OAAO,IAAME,OAAO;AAAA,uEAAG,kBAAO9C,kBAAP,EAA2BjB,GAA3B,EAAgCyB,OAAhC;AAAA;AAAA;AAAA;AAAA;AAAA,8CACdR,kBAAkB,CAACC,OAAnB,CACJsC,OADI,CACIxD,GADJ,EACS,GADT,EAEJmD,IAFI,CAEC;AAAEC,cAAAA,IAAI,EAAE3B;AAAR,aAFD,EAGJiC,EAHI,CAGD,iBAHC,EAGkB,UAACC,EAAD,EAAQ;AAC7BnB,cAAAA,OAAO,CAACC,GAAR,CAAYkB,EAAZ;AACA,qBAAOA,EAAE,CAACC,eAAV;AACD,aANI,CADc;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAPG,OAAO;AAAA;AAAA;AAAA,GAAb;AAUP,OAAO,IAAMC,SAAS;AAAA,wEAAG,kBAAO/C,kBAAP,EAA2BjB,GAA3B,EAAgCyB,OAAhC;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAEIR,kBAAkB,CAACC,OAAnB,CACtB+C,QADsB,CACbjE,GADa,EACRyB,OADQ,EAEtBL,IAFsB,EAFJ;;AAAA;AAAA;AAEbmC,YAAAA,MAFa,0BAEbA,MAFa;AAAA,8CAKd,IAAI9E,SAAJ,CAAc8E,MAAd,CALc;;AAAA;AAAA;AAAA;AAAA,8CAOd,IAAI9E,SAAJ,CAAc,CAAd,CAPc;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAATuF,SAAS;AAAA;AAAA;AAAA,GAAf;AAWP,OAAO,IAAME,MAAM;AAAA,wEAAG,mBAAOjD,kBAAP,EAA2BQ,OAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAChB0C,YAAAA,GADgB,GACV,IAAIC,IAAJ,GAAWC,OAAX,KAAuB,IADb;;AAAA,kBAEhBF,GAAG,IAAI,UAFS;AAAA;AAAA;AAAA;;AAAA,+CAGXlD,kBAAkB,CAACC,OAAnB,CACJoD,IADI,GAEJnB,IAFI,CAEC;AAAEC,cAAAA,IAAI,EAAE3B;AAAR,aAFD,EAGJiC,EAHI,CAGD,iBAHC,EAGkB,UAACC,EAAD,EAAQ;AAC7BnB,cAAAA,OAAO,CAACC,GAAR,CAAYkB,EAAZ;AACA,qBAAOA,EAAE,CAACC,eAAV;AACD,aANI,CAHW;;AAAA;AAWlBW,YAAAA,KAAK,CAAC,iBAAD,CAAL;;AAXkB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAANL,MAAM;AAAA;AAAA;AAAA,GAAZ","sourcesContent":["import BigNumber from \"bignumber.js\";\nimport { ethers } from \"ethers\";\n\nBigNumber.config({\n  EXPONENTIAL_AT: 1000,\n  DECIMAL_PLACES: 80,\n});\n\nconst GAS_LIMIT = {\n  STAKING: {\n    DEFAULT: 200000,\n    SNX: 850000,\n  },\n};\n\nexport const getMasterChefAddress = (sushi) => {\n  return sushi && sushi.masterChefAddress;\n};\nexport const getSushiAddress = (sushi) => {\n  return sushi && sushi.sushiAddress;\n};\nexport const getWethContract = (sushi) => {\n  return sushi && sushi.contracts && sushi.contracts.weth;\n};\n\nexport const getMasterChefContract = (sushi) => {\n  return sushi && sushi.contracts && sushi.contracts.masterChef;\n};\nexport const getSushiContract = (sushi) => {\n  return sushi && sushi.contracts && sushi.contracts.sushi;\n};\n\nexport const getFarms = (sushi) => {\n  return sushi\n    ? sushi.contracts.pools.map(\n        ({\n          pid,\n          name,\n          symbol,\n          icon,\n          tokenAddress,\n          tokenSymbol,\n          tokenContract,\n          lpAddress,\n          lpContract,\n        }) => ({\n          pid,\n          id: symbol,\n          name,\n          lpToken: symbol,\n          lpTokenAddress: lpAddress,\n          lpContract,\n          tokenAddress,\n          tokenSymbol,\n          tokenContract,\n          earnToken: \"sushi\",\n          earnTokenAddress: sushi.contracts.sushi.options.address,\n          icon,\n        })\n      )\n    : [];\n};\n\nexport const getPoolWeight = async (masterChefContract, pid) => {\n  const { allocPoint } = await masterChefContract.methods.poolInfo(pid).call();\n  const totalAllocPoint = await masterChefContract.methods\n    .totalAllocPoint()\n    .call();\n  return new BigNumber(allocPoint).div(new BigNumber(totalAllocPoint));\n};\n\nexport const getEarned = async (masterChefContract, pid, account) => {\n  return masterChefContract.methods.pendingSushi(pid, account).call();\n};\n\nexport const getTotalLPWethValue = async (\n  masterChefContract,\n  wethContract,\n  lpContract,\n  tokenContract,\n  pid\n) => {\n  // Get balance of the token address\n  const tokenAmountWholeLP = await tokenContract.methods\n    .balanceOf(lpContract.options.address)\n    .call();\n  const tokenDecimals = await tokenContract.methods.decimals().call();\n  // Get the share of lpContract that masterChefContract owns\n  const balance = await lpContract.methods\n    .balanceOf(masterChefContract.options.address)\n    .call();\n  // Convert that into the portion of total lpContract = p1\n  const totalSupply = await lpContract.methods.totalSupply().call();\n  // Get total weth value for the lpContract = w1\n  const lpContractWeth = await wethContract.methods\n    .balanceOf(lpContract.options.address)\n    .call();\n\n  // Return p1 * w1 * 2\n  const portionLp = new BigNumber(balance).div(new BigNumber(totalSupply));\n  const lpWethWorth = new BigNumber(lpContractWeth);\n  const totalLpWethValue = portionLp.times(lpWethWorth).times(new BigNumber(2));\n\n  console.log(totalLpWethValue);\n\n  // Calculate\n  const tokenAmount = new BigNumber(tokenAmountWholeLP)\n    .times(portionLp)\n    .div(new BigNumber(10).pow(tokenDecimals));\n\n  const wethAmount = new BigNumber(lpContractWeth)\n    .times(portionLp)\n    .div(new BigNumber(10).pow(18));\n\n  console.log(totalLpWethValue.div(new BigNumber(10).pow(18)));\n\n  return {\n    tokenAmount,\n    wethAmount,\n    totalWethValue: totalLpWethValue.div(new BigNumber(10).pow(18)),\n    tokenPriceInWeth: wethAmount.div(tokenAmount),\n    poolWeight: await getPoolWeight(masterChefContract, pid),\n  };\n};\n\nexport const approve = async (lpContract, masterChefContract, account) => {\n  return lpContract.methods\n    .approve(masterChefContract.options.address, ethers.constants.MaxUint256)\n    .send({ from: account });\n};\n\nexport const getSushiSupply = async (sushi) => {\n  return new BigNumber(\n    await sushi.contracts.sushi.methods.totalSupply().call()\n  );\n};\n\nexport const stake = async (masterChefContract, pid, amount, account) => {\n  return masterChefContract.methods\n    .deposit(\n      pid,\n      new BigNumber(amount).times(new BigNumber(10).pow(18)).toString()\n    )\n    .send({ from: account })\n    .on(\"transactionHash\", (tx) => {\n      console.log(tx);\n      return tx.transactionHash;\n    });\n};\n\nexport const unstake = async (masterChefContract, pid, amount, account) => {\n  return masterChefContract.methods\n    .withdraw(\n      pid,\n      new BigNumber(amount).times(new BigNumber(10).pow(18)).toString()\n    )\n    .send({ from: account })\n    .on(\"transactionHash\", (tx) => {\n      console.log(tx);\n      return tx.transactionHash;\n    });\n};\nexport const harvest = async (masterChefContract, pid, account) => {\n  return masterChefContract.methods\n    .deposit(pid, \"0\")\n    .send({ from: account })\n    .on(\"transactionHash\", (tx) => {\n      console.log(tx);\n      return tx.transactionHash;\n    });\n};\n\nexport const getStaked = async (masterChefContract, pid, account) => {\n  try {\n    const { amount } = await masterChefContract.methods\n      .userInfo(pid, account)\n      .call();\n    return new BigNumber(amount);\n  } catch {\n    return new BigNumber(0);\n  }\n};\n\nexport const redeem = async (masterChefContract, account) => {\n  let now = new Date().getTime() / 1000;\n  if (now >= 1597172400) {\n    return masterChefContract.methods\n      .exit()\n      .send({ from: account })\n      .on(\"transactionHash\", (tx) => {\n        console.log(tx);\n        return tx.transactionHash;\n      });\n  } else {\n    alert(\"pool not active\");\n  }\n};\n"]},"metadata":{},"sourceType":"module"}