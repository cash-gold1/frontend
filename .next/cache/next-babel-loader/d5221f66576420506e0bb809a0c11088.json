{"ast":null,"code":"var _jsxFileName = \"/Users/theo/frontend/pages/dashboard.js\";\nvar __jsx = React.createElement;\nimport React, { useEffect, useState } from \"react\";\nimport WalletConnect from \"@walletconnect/client\";\nimport QRCodeModal from \"@walletconnect/qrcode-modal\";\nimport Web3 from \"web3\";\nimport Head from \"next/head\";\nimport numbro from \"numbro\";\nimport Loader from \"react-loader-spinner\";\nimport { useWallet } from \"use-wallet\";\nimport useWindowSize from \"../hooks/useWindowSize\";\nimport useTokenBalance from \"../hooks/useTokenBalance\";\nimport useSushi from \"../hooks/useSushi\";\nimport Layout from \"../components/layout\";\nimport LayoutDashboard from \"../components/layoutDashboard\";\nimport CustomChart from \"../components/customChart\";\nimport { getBalanceNumber } from \"../utils/formatBalance\";\nimport { contractAddresses, supportedPools } from \"../sushi/lib/constants\";\nimport { getSushiAddress, getSushiSupply, getMasterChefContract } from \"../sushi/utils\";\nimport ColorGuide from \"../styles/colorGuide\";\nexport default function Dashboard() {\n  const sushi = useSushi();\n  const {\n    responsiveWidth,\n    responsiveHeight\n  } = useWindowSize();\n  const {\n    account,\n    balance,\n    connect,\n    chainId,\n    status\n  } = useWallet();\n  const isMobileLayout = responsiveWidth < 650;\n  const {\n    0: loading,\n    1: setLoading\n  } = useState(false);\n  const {\n    0: assets,\n    1: setAssets\n  } = useState([]);\n  const {\n    0: totalSupply,\n    1: setTotalSupply\n  } = useState(0);\n  const genesisTokenBalance = useTokenBalance(getSushiAddress(sushi));\n  useEffect(() => {\n    async function fetchTotalSupply() {\n      const supply = await getSushiSupply(sushi);\n      setTotalSupply(supply);\n    }\n\n    if (sushi) {\n      fetchTotalSupply();\n    }\n  }, [sushi, setTotalSupply]);\n  const keyIndicatorsList = [{\n    title: \"Total GT supply\",\n    value: totalSupply ? `${numbro(getBalanceNumber(totalSupply || 0)).format({\n      spaceSeparated: true,\n      thousandSeparated: true,\n      mantissa: 0\n    })}` : 0\n  }, {\n    title: \"Your GT earnings\",\n    value: `${numbro(getBalanceNumber(genesisTokenBalance || 0)).format({\n      spaceSeparated: true,\n      thousandSeparated: true,\n      mantissa: 2\n    })}`\n  }];\n  return __jsx(Layout, {\n    pageTitle: \"Mon dashboard\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 5\n    }\n  }, __jsx(LayoutDashboard, {\n    currentTabIndex: 0,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }\n  }, __jsx(\"div\", {\n    className: \"containerSpaceBetween\",\n    style: {\n      flexDirection: \"row\",\n      marginBottom: 20\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 9\n    }\n  }, keyIndicatorsList.map(({\n    title,\n    value\n  }, index) => __jsx(\"div\", {\n    className: \"containerItem containerSpaceBetween\",\n    style: {\n      padding: isMobileLayout ? 10 : responsiveWidth < 1250 ? 20 : 25,\n      width: \"42%\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 13\n    }\n  }, __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 15\n    }\n  }, __jsx(\"p\", {\n    style: {\n      color: ColorGuide.mainGrey\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 17\n    }\n  }, title), __jsx(\"h3\", {\n    style: {\n      marginBottom: 0\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 17\n    }\n  }, value))))), __jsx(\"p\", {\n    style: {\n      textAlign: \"center\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 9\n    }\n  }, __jsx(\"b\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 11\n    }\n  }, \"Pro Tip\"), \": boost your earnings using the GT-ETH pool!\")));\n}","map":{"version":3,"sources":["/Users/theo/frontend/pages/dashboard.js"],"names":["React","useEffect","useState","WalletConnect","QRCodeModal","Web3","Head","numbro","Loader","useWallet","useWindowSize","useTokenBalance","useSushi","Layout","LayoutDashboard","CustomChart","getBalanceNumber","contractAddresses","supportedPools","getSushiAddress","getSushiSupply","getMasterChefContract","ColorGuide","Dashboard","sushi","responsiveWidth","responsiveHeight","account","balance","connect","chainId","status","isMobileLayout","loading","setLoading","assets","setAssets","totalSupply","setTotalSupply","genesisTokenBalance","fetchTotalSupply","supply","keyIndicatorsList","title","value","format","spaceSeparated","thousandSeparated","mantissa","flexDirection","marginBottom","map","index","padding","width","color","mainGrey","textAlign"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport WalletConnect from \"@walletconnect/client\";\nimport QRCodeModal from \"@walletconnect/qrcode-modal\";\nimport Web3 from \"web3\";\n\nimport Head from \"next/head\";\nimport numbro from \"numbro\";\nimport Loader from \"react-loader-spinner\";\n\nimport { useWallet } from \"use-wallet\";\nimport useWindowSize from \"../hooks/useWindowSize\";\nimport useTokenBalance from \"../hooks/useTokenBalance\";\nimport useSushi from \"../hooks/useSushi\";\n\nimport Layout from \"../components/layout\";\nimport LayoutDashboard from \"../components/layoutDashboard\";\nimport CustomChart from \"../components/customChart\";\n\nimport { getBalanceNumber } from \"../utils/formatBalance\";\nimport { contractAddresses, supportedPools } from \"../sushi/lib/constants\";\nimport {\n  getSushiAddress,\n  getSushiSupply,\n  getMasterChefContract,\n} from \"../sushi/utils\";\n\nimport ColorGuide from \"../styles/colorGuide\";\n\nexport default function Dashboard() {\n  const sushi = useSushi();\n\n  const { responsiveWidth, responsiveHeight } = useWindowSize();\n  const { account, balance, connect, chainId, status } = useWallet();\n\n  const isMobileLayout = responsiveWidth < 650;\n\n  const [loading, setLoading] = useState(false);\n  const [assets, setAssets] = useState([]);\n  const [totalSupply, setTotalSupply] = useState(0);\n\n  const genesisTokenBalance = useTokenBalance(getSushiAddress(sushi));\n\n  useEffect(() => {\n    async function fetchTotalSupply() {\n      const supply = await getSushiSupply(sushi);\n      setTotalSupply(supply);\n    }\n\n    if (sushi) {\n      fetchTotalSupply();\n    }\n  }, [sushi, setTotalSupply]);\n\n  const keyIndicatorsList = [\n    {\n      title: \"Total GT supply\",\n      value: totalSupply\n        ? `${numbro(getBalanceNumber(totalSupply || 0)).format({\n            spaceSeparated: true,\n            thousandSeparated: true,\n            mantissa: 0,\n          })}`\n        : 0,\n    },\n    {\n      title: \"Your GT earnings\",\n      value: `${numbro(getBalanceNumber(genesisTokenBalance || 0)).format({\n        spaceSeparated: true,\n        thousandSeparated: true,\n        mantissa: 2,\n      })}`,\n    },\n  ];\n\n  return (\n    <Layout pageTitle=\"Mon dashboard\">\n      <LayoutDashboard currentTabIndex={0}>\n        <div\n          className=\"containerSpaceBetween\"\n          style={{ flexDirection: \"row\", marginBottom: 20 }}\n        >\n          {keyIndicatorsList.map(({ title, value }, index) => (\n            <div\n              className=\"containerItem containerSpaceBetween\"\n              style={{\n                padding: isMobileLayout ? 10 : responsiveWidth < 1250 ? 20 : 25,\n                width: \"42%\",\n              }}\n            >\n              <div>\n                <p style={{ color: ColorGuide.mainGrey }}>{title}</p>\n                <h3 style={{ marginBottom: 0 }}>{value}</h3>\n              </div>\n            </div>\n          ))}\n        </div>\n\n        <p style={{ textAlign: \"center\" }}>\n          <b>Pro Tip</b>: boost your earnings using the GT-ETH pool!\n        </p>\n      </LayoutDashboard>\n    </Layout>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}