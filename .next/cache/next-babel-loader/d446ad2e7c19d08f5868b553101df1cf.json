{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\n\nvar _s = $RefreshSig$();\n\nimport { useCallback, useEffect, useState } from \"react\";\nimport BigNumber from \"bignumber.js\";\nimport { useWallet } from \"use-wallet\";\nimport { getEarned, getMasterChefContract } from \"../sushi/utils\";\nimport useSushi from \"./useSushi\";\nimport useBlock from \"./useBlock\";\n\nvar useEarnings = function useEarnings(pid) {\n  _s();\n\n  var _useState = useState(new BigNumber(0)),\n      balance = _useState[0],\n      setBalance = _useState[1];\n\n  var _useWallet = useWallet(),\n      account = _useWallet.account,\n      ethereum = _useWallet.ethereum;\n\n  var sushi = useSushi();\n  var masterChefContract = getMasterChefContract(sushi);\n  var block = useBlock();\n  var fetchBalance = useCallback( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n    var balance;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return getEarned(masterChefContract, pid, account);\n\n          case 2:\n            balance = _context.sent;\n            setBalance(new BigNumber(balance));\n\n          case 4:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  })), [account, masterChefContract, sushi]);\n  useEffect(function () {\n    if (account && masterChefContract && sushi) {\n      fetchBalance();\n    }\n  }, [account, block, masterChefContract, setBalance, sushi]);\n  return balance;\n};\n\n_s(useEarnings, \"tgmDGxpRE/LJdgGRTVk1OS6Ptc0=\", false, function () {\n  return [useWallet, useSushi, useBlock];\n});\n\nexport default useEarnings;","map":{"version":3,"sources":["/Users/theo/frontend/hooks/useEarnings.ts"],"names":["useCallback","useEffect","useState","BigNumber","useWallet","getEarned","getMasterChefContract","useSushi","useBlock","useEarnings","pid","balance","setBalance","account","ethereum","sushi","masterChefContract","block","fetchBalance"],"mappings":";;;;;AAAA,SAASA,WAAT,EAAsBC,SAAtB,EAAiCC,QAAjC,QAAiD,OAAjD;AAEA,OAAOC,SAAP,MAAsB,cAAtB;AACA,SAASC,SAAT,QAA0B,YAA1B;AAEA,SAASC,SAAT,EAAoBC,qBAApB,QAAiD,gBAAjD;AACA,OAAOC,QAAP,MAAqB,YAArB;AACA,OAAOC,QAAP,MAAqB,YAArB;;AAEA,IAAMC,WAAW,GAAG,SAAdA,WAAc,CAACC,GAAD,EAAiB;AAAA;;AAAA,kBACLR,QAAQ,CAAC,IAAIC,SAAJ,CAAc,CAAd,CAAD,CADH;AAAA,MAC5BQ,OAD4B;AAAA,MACnBC,UADmB;;AAAA,mBAE+BR,SAAS,EAFxC;AAAA,MAE3BS,OAF2B,cAE3BA,OAF2B;AAAA,MAElBC,QAFkB,cAElBA,QAFkB;;AAGnC,MAAMC,KAAK,GAAGR,QAAQ,EAAtB;AACA,MAAMS,kBAAkB,GAAGV,qBAAqB,CAACS,KAAD,CAAhD;AACA,MAAME,KAAK,GAAGT,QAAQ,EAAtB;AAEA,MAAMU,YAAY,GAAGlB,WAAW,wEAAC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACTK,SAAS,CAACW,kBAAD,EAAqBN,GAArB,EAA0BG,OAA1B,CADA;;AAAA;AACzBF,YAAAA,OADyB;AAE/BC,YAAAA,UAAU,CAAC,IAAIT,SAAJ,CAAcQ,OAAd,CAAD,CAAV;;AAF+B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAD,IAG7B,CAACE,OAAD,EAAUG,kBAAV,EAA8BD,KAA9B,CAH6B,CAAhC;AAKAd,EAAAA,SAAS,CAAC,YAAM;AACd,QAAIY,OAAO,IAAIG,kBAAX,IAAiCD,KAArC,EAA4C;AAC1CG,MAAAA,YAAY;AACb;AACF,GAJQ,EAIN,CAACL,OAAD,EAAUI,KAAV,EAAiBD,kBAAjB,EAAqCJ,UAArC,EAAiDG,KAAjD,CAJM,CAAT;AAMA,SAAOJ,OAAP;AACD,CAnBD;;GAAMF,W;UAE8DL,S,EACpDG,Q,EAEAC,Q;;;AAgBhB,eAAeC,WAAf","sourcesContent":["import { useCallback, useEffect, useState } from \"react\";\n\nimport BigNumber from \"bignumber.js\";\nimport { useWallet } from \"use-wallet\";\n\nimport { getEarned, getMasterChefContract } from \"../sushi/utils\";\nimport useSushi from \"./useSushi\";\nimport useBlock from \"./useBlock\";\n\nconst useEarnings = (pid: number) => {\n  const [balance, setBalance] = useState(new BigNumber(0));\n  const { account, ethereum }: { account: string; ethereum: any } = useWallet();\n  const sushi = useSushi();\n  const masterChefContract = getMasterChefContract(sushi);\n  const block = useBlock();\n\n  const fetchBalance = useCallback(async () => {\n    const balance = await getEarned(masterChefContract, pid, account);\n    setBalance(new BigNumber(balance));\n  }, [account, masterChefContract, sushi]);\n\n  useEffect(() => {\n    if (account && masterChefContract && sushi) {\n      fetchBalance();\n    }\n  }, [account, block, masterChefContract, setBalance, sushi]);\n\n  return balance;\n};\n\nexport default useEarnings;\n"]},"metadata":{},"sourceType":"module"}