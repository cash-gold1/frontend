{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\n\nvar _s = $RefreshSig$();\n\nimport { useCallback, useEffect, useState } from 'react';\nimport BigNumber from 'bignumber.js';\nimport { useWallet } from 'use-wallet';\nimport { getStaked, getMasterChefContract } from '../sushi/utils';\nimport useSushi from './useSushi';\nimport useBlock from './useBlock';\n\nvar useStakedBalance = function useStakedBalance(pid) {\n  _s();\n\n  var _useState = useState(new BigNumber(0)),\n      balance = _useState[0],\n      setBalance = _useState[1];\n\n  var _useWallet = useWallet(),\n      account = _useWallet.account;\n\n  var sushi = useSushi();\n  var masterChefContract = getMasterChefContract(sushi);\n  var block = useBlock();\n  var fetchBalance = useCallback( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n    var balance;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return getStaked(masterChefContract, pid, account);\n\n          case 2:\n            balance = _context.sent;\n            setBalance(new BigNumber(balance));\n\n          case 4:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  })), [account, pid, sushi]);\n  useEffect(function () {\n    if (account && sushi) {\n      fetchBalance();\n    }\n  }, [account, pid, setBalance, block, sushi]);\n  return balance;\n};\n\n_s(useStakedBalance, \"h6eYjtCBNDiW/710K5kELkelRpg=\", false, function () {\n  return [useWallet, useSushi, useBlock];\n});\n\nexport default useStakedBalance;","map":{"version":3,"sources":["/Users/theo/frontend/hooks/useStakedBalance.ts"],"names":["useCallback","useEffect","useState","BigNumber","useWallet","getStaked","getMasterChefContract","useSushi","useBlock","useStakedBalance","pid","balance","setBalance","account","sushi","masterChefContract","block","fetchBalance"],"mappings":";;;;;AAAA,SAASA,WAAT,EAAsBC,SAAtB,EAAiCC,QAAjC,QAAiD,OAAjD;AAEA,OAAOC,SAAP,MAAsB,cAAtB;AACA,SAASC,SAAT,QAA0B,YAA1B;AAEA,SAASC,SAAT,EAAoBC,qBAApB,QAAiD,gBAAjD;AACA,OAAOC,QAAP,MAAqB,YAArB;AACA,OAAOC,QAAP,MAAqB,YAArB;;AAEA,IAAMC,gBAAgB,GAAG,SAAnBA,gBAAmB,CAACC,GAAD,EAAiB;AAAA;;AAAA,kBACVR,QAAQ,CAAC,IAAIC,SAAJ,CAAc,CAAd,CAAD,CADE;AAAA,MACjCQ,OADiC;AAAA,MACxBC,UADwB;;AAAA,mBAECR,SAAS,EAFV;AAAA,MAEhCS,OAFgC,cAEhCA,OAFgC;;AAGxC,MAAMC,KAAK,GAAGP,QAAQ,EAAtB;AACA,MAAMQ,kBAAkB,GAAGT,qBAAqB,CAACQ,KAAD,CAAhD;AACA,MAAME,KAAK,GAAGR,QAAQ,EAAtB;AAEA,MAAMS,YAAY,GAAGjB,WAAW,wEAAC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACTK,SAAS,CAACU,kBAAD,EAAqBL,GAArB,EAA0BG,OAA1B,CADA;;AAAA;AACzBF,YAAAA,OADyB;AAE/BC,YAAAA,UAAU,CAAC,IAAIT,SAAJ,CAAcQ,OAAd,CAAD,CAAV;;AAF+B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAD,IAG7B,CAACE,OAAD,EAAUH,GAAV,EAAeI,KAAf,CAH6B,CAAhC;AAKAb,EAAAA,SAAS,CAAC,YAAM;AACd,QAAIY,OAAO,IAAIC,KAAf,EAAsB;AACpBG,MAAAA,YAAY;AACb;AACF,GAJQ,EAIN,CAACJ,OAAD,EAAUH,GAAV,EAAeE,UAAf,EAA2BI,KAA3B,EAAkCF,KAAlC,CAJM,CAAT;AAMA,SAAOH,OAAP;AACD,CAnBD;;GAAMF,gB;UAEqCL,S,EAC3BG,Q,EAEAC,Q;;;AAgBhB,eAAeC,gBAAf","sourcesContent":["import { useCallback, useEffect, useState } from 'react'\n\nimport BigNumber from 'bignumber.js'\nimport { useWallet } from 'use-wallet'\n\nimport { getStaked, getMasterChefContract } from '../sushi/utils'\nimport useSushi from './useSushi'\nimport useBlock from './useBlock'\n\nconst useStakedBalance = (pid: number) => {\n  const [balance, setBalance] = useState(new BigNumber(0))\n  const { account }: { account: string } = useWallet()\n  const sushi = useSushi()\n  const masterChefContract = getMasterChefContract(sushi)\n  const block = useBlock()\n\n  const fetchBalance = useCallback(async () => {\n    const balance = await getStaked(masterChefContract, pid, account)\n    setBalance(new BigNumber(balance))\n  }, [account, pid, sushi])\n\n  useEffect(() => {\n    if (account && sushi) {\n      fetchBalance()\n    }\n  }, [account, pid, setBalance, block, sushi])\n\n  return balance\n}\n\nexport default useStakedBalance\n"]},"metadata":{},"sourceType":"module"}