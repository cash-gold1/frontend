{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport BigNumber from 'bignumber.js/bignumber';\nimport ERC20Abi from './abi/erc20.json';\nimport MasterChefAbi from './abi/masterchef.json';\nimport XSushiAbi from './abi/xsushi.json';\nimport SushiAbi from './abi/sushi.json';\nimport UNIV2PairAbi from './abi/uni_v2_lp.json';\nimport WETHAbi from './abi/weth.json';\nimport { contractAddresses, SUBTRACT_GAS_LIMIT, supportedPools } from './constants.js';\nimport * as Types from './types.js';\nexport var Contracts = /*#__PURE__*/function () {\n  function Contracts(provider, networkId, web3, options) {\n    var _this = this;\n\n    _classCallCheck(this, Contracts);\n\n    this.web3 = web3;\n    this.defaultConfirmations = options.defaultConfirmations;\n    this.autoGasMultiplier = options.autoGasMultiplier || 1.5;\n    this.confirmationType = options.confirmationType || Types.ConfirmationType.Confirmed;\n    this.defaultGas = options.defaultGas;\n    this.defaultGasPrice = options.defaultGasPrice;\n    this.sushi = new this.web3.eth.Contract(SushiAbi);\n    this.masterChef = new this.web3.eth.Contract(MasterChefAbi);\n    this.xSushiStaking = new this.web3.eth.Contract(XSushiAbi);\n    this.weth = new this.web3.eth.Contract(WETHAbi);\n    this.pools = supportedPools.map(function (pool) {\n      return Object.assign(pool, {\n        lpAddress: pool.lpAddresses[networkId],\n        tokenAddress: pool.tokenAddresses[networkId],\n        lpContract: new _this.web3.eth.Contract(UNIV2PairAbi),\n        tokenContract: new _this.web3.eth.Contract(ERC20Abi)\n      });\n    });\n    this.setProvider(provider, networkId);\n    this.setDefaultAccount(this.web3.eth.defaultAccount);\n  }\n\n  _createClass(Contracts, [{\n    key: \"setProvider\",\n    value: function setProvider(provider, networkId) {\n      var setProvider = function setProvider(contract, address) {\n        contract.setProvider(provider);\n        if (address) contract.options.address = address;else console.error('Contract address not found in network', networkId);\n      };\n\n      setProvider(this.sushi, contractAddresses.sushi[networkId]);\n      setProvider(this.masterChef, contractAddresses.masterChef[networkId]);\n      setProvider(this.xSushiStaking, contractAddresses.xSushi[networkId]);\n      setProvider(this.weth, contractAddresses.weth[networkId]);\n      this.pools.forEach(function (_ref) {\n        var lpContract = _ref.lpContract,\n            lpAddress = _ref.lpAddress,\n            tokenContract = _ref.tokenContract,\n            tokenAddress = _ref.tokenAddress;\n        setProvider(lpContract, lpAddress);\n        setProvider(tokenContract, tokenAddress);\n      });\n    }\n  }, {\n    key: \"setDefaultAccount\",\n    value: function setDefaultAccount(account) {\n      this.sushi.options.from = account;\n      this.masterChef.options.from = account;\n    }\n  }, {\n    key: \"callContractFunction\",\n    value: function () {\n      var _callContractFunction = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(method, options) {\n        var _this2 = this;\n\n        var confirmations, confirmationType, autoGasMultiplier, txOptions, gasEstimate, data, from, value, to, multiplier, totalGas, g, promi, OUTCOMES, hashOutcome, confirmationOutcome, t, hashPromise, confirmationPromise, _transactionHash, transactionHash;\n\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                confirmations = options.confirmations, confirmationType = options.confirmationType, autoGasMultiplier = options.autoGasMultiplier, txOptions = _objectWithoutProperties(options, [\"confirmations\", \"confirmationType\", \"autoGasMultiplier\"]);\n\n                if (this.blockGasLimit) {\n                  _context.next = 4;\n                  break;\n                }\n\n                _context.next = 4;\n                return this.setGasLimit();\n\n              case 4:\n                if (!txOptions.gasPrice && this.defaultGasPrice) {\n                  txOptions.gasPrice = this.defaultGasPrice;\n                }\n\n                if (!(confirmationType === Types.ConfirmationType.Simulate || !options.gas)) {\n                  _context.next = 30;\n                  break;\n                }\n\n                if (!(this.defaultGas && confirmationType !== Types.ConfirmationType.Simulate)) {\n                  _context.next = 10;\n                  break;\n                }\n\n                txOptions.gas = this.defaultGas;\n                _context.next = 27;\n                break;\n\n              case 10:\n                _context.prev = 10;\n                console.log('estimating gas');\n                _context.next = 14;\n                return method.estimateGas(txOptions);\n\n              case 14:\n                gasEstimate = _context.sent;\n                _context.next = 24;\n                break;\n\n              case 17:\n                _context.prev = 17;\n                _context.t0 = _context[\"catch\"](10);\n                data = method.encodeABI();\n                from = options.from, value = options.value;\n                to = method._parent._address;\n                _context.t0.transactionData = {\n                  from: from,\n                  value: value,\n                  data: data,\n                  to: to\n                };\n                throw _context.t0;\n\n              case 24:\n                multiplier = autoGasMultiplier || this.autoGasMultiplier;\n                totalGas = Math.floor(gasEstimate * multiplier);\n                txOptions.gas = totalGas < this.blockGasLimit ? totalGas : this.blockGasLimit;\n\n              case 27:\n                if (!(confirmationType === Types.ConfirmationType.Simulate)) {\n                  _context.next = 30;\n                  break;\n                }\n\n                g = txOptions.gas;\n                return _context.abrupt(\"return\", {\n                  gasEstimate: gasEstimate,\n                  g: g\n                });\n\n              case 30:\n                if (txOptions.value) {\n                  txOptions.value = new BigNumber(txOptions.value).toFixed(0);\n                } else {\n                  txOptions.value = '0';\n                }\n\n                promi = method.send(txOptions);\n                OUTCOMES = {\n                  INITIAL: 0,\n                  RESOLVED: 1,\n                  REJECTED: 2\n                };\n                hashOutcome = OUTCOMES.INITIAL;\n                confirmationOutcome = OUTCOMES.INITIAL;\n                t = confirmationType !== undefined ? confirmationType : this.confirmationType;\n\n                if (Object.values(Types.ConfirmationType).includes(t)) {\n                  _context.next = 38;\n                  break;\n                }\n\n                throw new Error(\"Invalid confirmation type: \".concat(t));\n\n              case 38:\n                if (t === Types.ConfirmationType.Hash || t === Types.ConfirmationType.Both) {\n                  hashPromise = new Promise(function (resolve, reject) {\n                    promi.on('error', function (error) {\n                      if (hashOutcome === OUTCOMES.INITIAL) {\n                        hashOutcome = OUTCOMES.REJECTED;\n                        reject(error);\n                        var anyPromi = promi;\n                        anyPromi.off();\n                      }\n                    });\n                    promi.on('transactionHash', function (txHash) {\n                      if (hashOutcome === OUTCOMES.INITIAL) {\n                        hashOutcome = OUTCOMES.RESOLVED;\n                        resolve(txHash);\n\n                        if (t !== Types.ConfirmationType.Both) {\n                          var anyPromi = promi;\n                          anyPromi.off();\n                        }\n                      }\n                    });\n                  });\n                }\n\n                if (t === Types.ConfirmationType.Confirmed || t === Types.ConfirmationType.Both) {\n                  confirmationPromise = new Promise(function (resolve, reject) {\n                    promi.on('error', function (error) {\n                      if ((t === Types.ConfirmationType.Confirmed || hashOutcome === OUTCOMES.RESOLVED) && confirmationOutcome === OUTCOMES.INITIAL) {\n                        confirmationOutcome = OUTCOMES.REJECTED;\n                        reject(error);\n                        var anyPromi = promi;\n                        anyPromi.off();\n                      }\n                    });\n                    var desiredConf = confirmations || _this2.defaultConfirmations;\n\n                    if (desiredConf) {\n                      promi.on('confirmation', function (confNumber, receipt) {\n                        if (confNumber >= desiredConf) {\n                          if (confirmationOutcome === OUTCOMES.INITIAL) {\n                            confirmationOutcome = OUTCOMES.RESOLVED;\n                            resolve(receipt);\n                            var anyPromi = promi;\n                            anyPromi.off();\n                          }\n                        }\n                      });\n                    } else {\n                      promi.on('receipt', function (receipt) {\n                        confirmationOutcome = OUTCOMES.RESOLVED;\n                        resolve(receipt);\n                        var anyPromi = promi;\n                        anyPromi.off();\n                      });\n                    }\n                  });\n                }\n\n                if (!(t === Types.ConfirmationType.Hash)) {\n                  _context.next = 46;\n                  break;\n                }\n\n                _context.next = 43;\n                return hashPromise;\n\n              case 43:\n                _transactionHash = _context.sent;\n\n                if (this.notifier) {\n                  this.notifier.hash(_transactionHash);\n                }\n\n                return _context.abrupt(\"return\", {\n                  transactionHash: _transactionHash\n                });\n\n              case 46:\n                if (!(t === Types.ConfirmationType.Confirmed)) {\n                  _context.next = 48;\n                  break;\n                }\n\n                return _context.abrupt(\"return\", confirmationPromise);\n\n              case 48:\n                _context.next = 50;\n                return hashPromise;\n\n              case 50:\n                transactionHash = _context.sent;\n\n                if (this.notifier) {\n                  this.notifier.hash(transactionHash);\n                }\n\n                return _context.abrupt(\"return\", {\n                  transactionHash: transactionHash,\n                  confirmation: confirmationPromise\n                });\n\n              case 53:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this, [[10, 17]]);\n      }));\n\n      function callContractFunction(_x, _x2) {\n        return _callContractFunction.apply(this, arguments);\n      }\n\n      return callContractFunction;\n    }()\n  }, {\n    key: \"callConstantContractFunction\",\n    value: function () {\n      var _callConstantContractFunction = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(method, options) {\n        var m2, blockNumber, txOptions;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                m2 = method;\n                blockNumber = options.blockNumber, txOptions = _objectWithoutProperties(options, [\"blockNumber\"]);\n                return _context2.abrupt(\"return\", m2.call(txOptions, blockNumber));\n\n              case 3:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }));\n\n      function callConstantContractFunction(_x3, _x4) {\n        return _callConstantContractFunction.apply(this, arguments);\n      }\n\n      return callConstantContractFunction;\n    }()\n  }, {\n    key: \"setGasLimit\",\n    value: function () {\n      var _setGasLimit = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n        var block;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                _context3.next = 2;\n                return this.web3.eth.getBlock('latest');\n\n              case 2:\n                block = _context3.sent;\n                this.blockGasLimit = block.gasLimit - SUBTRACT_GAS_LIMIT;\n\n              case 4:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function setGasLimit() {\n        return _setGasLimit.apply(this, arguments);\n      }\n\n      return setGasLimit;\n    }()\n  }]);\n\n  return Contracts;\n}();","map":{"version":3,"sources":["/Users/theo/genesis/sushi/lib/contracts.js"],"names":["BigNumber","ERC20Abi","MasterChefAbi","XSushiAbi","SushiAbi","UNIV2PairAbi","WETHAbi","contractAddresses","SUBTRACT_GAS_LIMIT","supportedPools","Types","Contracts","provider","networkId","web3","options","defaultConfirmations","autoGasMultiplier","confirmationType","ConfirmationType","Confirmed","defaultGas","defaultGasPrice","sushi","eth","Contract","masterChef","xSushiStaking","weth","pools","map","pool","Object","assign","lpAddress","lpAddresses","tokenAddress","tokenAddresses","lpContract","tokenContract","setProvider","setDefaultAccount","defaultAccount","contract","address","console","error","xSushi","forEach","account","from","method","confirmations","txOptions","blockGasLimit","setGasLimit","gasPrice","Simulate","gas","log","estimateGas","gasEstimate","data","encodeABI","value","to","_parent","_address","transactionData","multiplier","totalGas","Math","floor","g","toFixed","promi","send","OUTCOMES","INITIAL","RESOLVED","REJECTED","hashOutcome","confirmationOutcome","t","undefined","values","includes","Error","Hash","Both","hashPromise","Promise","resolve","reject","on","anyPromi","off","txHash","confirmationPromise","desiredConf","confNumber","receipt","transactionHash","notifier","hash","confirmation","m2","blockNumber","call","getBlock","block","gasLimit"],"mappings":"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","sourcesContent":["import BigNumber from 'bignumber.js/bignumber'\nimport ERC20Abi from './abi/erc20.json'\nimport MasterChefAbi from './abi/masterchef.json'\nimport XSushiAbi from './abi/xsushi.json'\nimport SushiAbi from './abi/sushi.json'\nimport UNIV2PairAbi from './abi/uni_v2_lp.json'\nimport WETHAbi from './abi/weth.json'\nimport {\n  contractAddresses,\n  SUBTRACT_GAS_LIMIT,\n  supportedPools,\n} from './constants.js'\nimport * as Types from './types.js'\n\nexport class Contracts {\n  constructor(provider, networkId, web3, options) {\n    this.web3 = web3\n    this.defaultConfirmations = options.defaultConfirmations\n    this.autoGasMultiplier = options.autoGasMultiplier || 1.5\n    this.confirmationType =\n      options.confirmationType || Types.ConfirmationType.Confirmed\n    this.defaultGas = options.defaultGas\n    this.defaultGasPrice = options.defaultGasPrice\n\n    this.sushi = new this.web3.eth.Contract(SushiAbi)\n    this.masterChef = new this.web3.eth.Contract(MasterChefAbi)\n    this.xSushiStaking = new this.web3.eth.Contract(XSushiAbi)\n    this.weth = new this.web3.eth.Contract(WETHAbi)\n\n    this.pools = supportedPools.map((pool) =>\n      Object.assign(pool, {\n        lpAddress: pool.lpAddresses[networkId],\n        tokenAddress: pool.tokenAddresses[networkId],\n        lpContract: new this.web3.eth.Contract(UNIV2PairAbi),\n        tokenContract: new this.web3.eth.Contract(ERC20Abi),\n      }),\n    )\n\n    this.setProvider(provider, networkId)\n    this.setDefaultAccount(this.web3.eth.defaultAccount)\n  }\n\n  setProvider(provider, networkId) {\n    const setProvider = (contract, address) => {\n      contract.setProvider(provider)\n      if (address) contract.options.address = address\n      else console.error('Contract address not found in network', networkId)\n    }\n\n    setProvider(this.sushi, contractAddresses.sushi[networkId])\n    setProvider(this.masterChef, contractAddresses.masterChef[networkId])\n    setProvider(this.xSushiStaking, contractAddresses.xSushi[networkId])\n    setProvider(this.weth, contractAddresses.weth[networkId])\n\n    this.pools.forEach(\n      ({ lpContract, lpAddress, tokenContract, tokenAddress }) => {\n        setProvider(lpContract, lpAddress)\n        setProvider(tokenContract, tokenAddress)\n      },\n    )\n  }\n\n  setDefaultAccount(account) {\n    this.sushi.options.from = account\n    this.masterChef.options.from = account\n  }\n\n  async callContractFunction(method, options) {\n    const {\n      confirmations,\n      confirmationType,\n      autoGasMultiplier,\n      ...txOptions\n    } = options\n\n    if (!this.blockGasLimit) {\n      await this.setGasLimit()\n    }\n\n    if (!txOptions.gasPrice && this.defaultGasPrice) {\n      txOptions.gasPrice = this.defaultGasPrice\n    }\n\n    if (confirmationType === Types.ConfirmationType.Simulate || !options.gas) {\n      let gasEstimate\n      if (\n        this.defaultGas &&\n        confirmationType !== Types.ConfirmationType.Simulate\n      ) {\n        txOptions.gas = this.defaultGas\n      } else {\n        try {\n          console.log('estimating gas')\n          gasEstimate = await method.estimateGas(txOptions)\n        } catch (error) {\n          const data = method.encodeABI()\n          const { from, value } = options\n          const to = method._parent._address\n          error.transactionData = { from, value, data, to }\n          throw error\n        }\n\n        const multiplier = autoGasMultiplier || this.autoGasMultiplier\n        const totalGas = Math.floor(gasEstimate * multiplier)\n        txOptions.gas =\n          totalGas < this.blockGasLimit ? totalGas : this.blockGasLimit\n      }\n\n      if (confirmationType === Types.ConfirmationType.Simulate) {\n        let g = txOptions.gas\n        return { gasEstimate, g }\n      }\n    }\n\n    if (txOptions.value) {\n      txOptions.value = new BigNumber(txOptions.value).toFixed(0)\n    } else {\n      txOptions.value = '0'\n    }\n\n    const promi = method.send(txOptions)\n\n    const OUTCOMES = {\n      INITIAL: 0,\n      RESOLVED: 1,\n      REJECTED: 2,\n    }\n\n    let hashOutcome = OUTCOMES.INITIAL\n    let confirmationOutcome = OUTCOMES.INITIAL\n\n    const t =\n      confirmationType !== undefined ? confirmationType : this.confirmationType\n\n    if (!Object.values(Types.ConfirmationType).includes(t)) {\n      throw new Error(`Invalid confirmation type: ${t}`)\n    }\n\n    let hashPromise\n    let confirmationPromise\n\n    if (\n      t === Types.ConfirmationType.Hash ||\n      t === Types.ConfirmationType.Both\n    ) {\n      hashPromise = new Promise((resolve, reject) => {\n        promi.on('error', (error) => {\n          if (hashOutcome === OUTCOMES.INITIAL) {\n            hashOutcome = OUTCOMES.REJECTED\n            reject(error)\n            const anyPromi = promi\n            anyPromi.off()\n          }\n        })\n\n        promi.on('transactionHash', (txHash) => {\n          if (hashOutcome === OUTCOMES.INITIAL) {\n            hashOutcome = OUTCOMES.RESOLVED\n            resolve(txHash)\n            if (t !== Types.ConfirmationType.Both) {\n              const anyPromi = promi\n              anyPromi.off()\n            }\n          }\n        })\n      })\n    }\n\n    if (\n      t === Types.ConfirmationType.Confirmed ||\n      t === Types.ConfirmationType.Both\n    ) {\n      confirmationPromise = new Promise((resolve, reject) => {\n        promi.on('error', (error) => {\n          if (\n            (t === Types.ConfirmationType.Confirmed ||\n              hashOutcome === OUTCOMES.RESOLVED) &&\n            confirmationOutcome === OUTCOMES.INITIAL\n          ) {\n            confirmationOutcome = OUTCOMES.REJECTED\n            reject(error)\n            const anyPromi = promi\n            anyPromi.off()\n          }\n        })\n\n        const desiredConf = confirmations || this.defaultConfirmations\n        if (desiredConf) {\n          promi.on('confirmation', (confNumber, receipt) => {\n            if (confNumber >= desiredConf) {\n              if (confirmationOutcome === OUTCOMES.INITIAL) {\n                confirmationOutcome = OUTCOMES.RESOLVED\n                resolve(receipt)\n                const anyPromi = promi\n                anyPromi.off()\n              }\n            }\n          })\n        } else {\n          promi.on('receipt', (receipt) => {\n            confirmationOutcome = OUTCOMES.RESOLVED\n            resolve(receipt)\n            const anyPromi = promi\n            anyPromi.off()\n          })\n        }\n      })\n    }\n\n    if (t === Types.ConfirmationType.Hash) {\n      const transactionHash = await hashPromise\n      if (this.notifier) {\n        this.notifier.hash(transactionHash)\n      }\n      return { transactionHash }\n    }\n\n    if (t === Types.ConfirmationType.Confirmed) {\n      return confirmationPromise\n    }\n\n    const transactionHash = await hashPromise\n    if (this.notifier) {\n      this.notifier.hash(transactionHash)\n    }\n    return {\n      transactionHash,\n      confirmation: confirmationPromise,\n    }\n  }\n\n  async callConstantContractFunction(method, options) {\n    const m2 = method\n    const { blockNumber, ...txOptions } = options\n    return m2.call(txOptions, blockNumber)\n  }\n\n  async setGasLimit() {\n    const block = await this.web3.eth.getBlock('latest')\n    this.blockGasLimit = block.gasLimit - SUBTRACT_GAS_LIMIT\n  }\n}\n"]},"metadata":{},"sourceType":"module"}