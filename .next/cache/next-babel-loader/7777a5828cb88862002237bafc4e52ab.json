{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport Web3 from 'web3';\nimport BigNumber from 'bignumber.js';\nimport { Contracts } from './lib/contracts.js';\nimport { Account } from './lib/accounts.js';\nimport { EVM } from './lib/evm.js';\nimport { contractAddresses } from './lib/constants';\nexport var Sushi = /*#__PURE__*/function () {\n  function Sushi(provider, networkId, testing, options) {\n    _classCallCheck(this, Sushi);\n\n    var realProvider;\n\n    if (typeof provider === 'string') {\n      if (provider.includes('wss')) {\n        realProvider = new Web3.providers.WebsocketProvider(provider, options.ethereumNodeTimeout || 10000);\n      } else {\n        realProvider = new Web3.providers.HttpProvider(provider, options.ethereumNodeTimeout || 10000);\n      }\n    } else {\n      realProvider = provider;\n    }\n\n    this.web3 = new Web3(realProvider);\n\n    if (testing) {\n      this.testing = new EVM(realProvider);\n      this.snapshot = this.testing.snapshot();\n    }\n\n    if (options.defaultAccount) {\n      this.web3.eth.defaultAccount = options.defaultAccount;\n    }\n\n    this.contracts = new Contracts(realProvider, networkId, this.web3, options);\n    this.sushiAddress = contractAddresses.sushi[networkId];\n    this.masterChefAddress = contractAddresses.masterChef[networkId];\n    this.wethAddress = contractAddresses.weth[networkId];\n  }\n\n  _createClass(Sushi, [{\n    key: \"resetEVM\",\n    value: function () {\n      var _resetEVM = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                this.testing.resetEVM(this.snapshot);\n\n              case 1:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function resetEVM() {\n        return _resetEVM.apply(this, arguments);\n      }\n\n      return resetEVM;\n    }()\n  }, {\n    key: \"addAccount\",\n    value: function addAccount(address, number) {\n      this.accounts.push(new Account(this.contracts, address, number));\n    }\n  }, {\n    key: \"setProvider\",\n    value: function setProvider(provider, networkId) {\n      this.web3.setProvider(provider);\n      this.contracts.setProvider(provider, networkId);\n      this.operation.setNetworkId(networkId);\n    }\n  }, {\n    key: \"setDefaultAccount\",\n    value: function setDefaultAccount(account) {\n      this.web3.eth.defaultAccount = account;\n      this.contracts.setDefaultAccount(account);\n    }\n  }, {\n    key: \"getDefaultAccount\",\n    value: function getDefaultAccount() {\n      return this.web3.eth.defaultAccount;\n    }\n  }, {\n    key: \"loadAccount\",\n    value: function loadAccount(account) {\n      var newAccount = this.web3.eth.accounts.wallet.add(account.privateKey);\n\n      if (!newAccount || account.address && account.address.toLowerCase() !== newAccount.address.toLowerCase()) {\n        throw new Error(\"Loaded account address mismatch.\\n        Expected \".concat(account.address, \", got \").concat(newAccount ? newAccount.address : null));\n      }\n    }\n  }, {\n    key: \"toBigN\",\n    value: function toBigN(a) {\n      return BigNumber(a);\n    }\n  }]);\n\n  return Sushi;\n}();","map":{"version":3,"sources":["/Users/theo/frontend/sushi/Sushi.js"],"names":["Web3","BigNumber","Contracts","Account","EVM","contractAddresses","Sushi","provider","networkId","testing","options","realProvider","includes","providers","WebsocketProvider","ethereumNodeTimeout","HttpProvider","web3","snapshot","defaultAccount","eth","contracts","sushiAddress","sushi","masterChefAddress","masterChef","wethAddress","weth","resetEVM","address","number","accounts","push","setProvider","operation","setNetworkId","account","setDefaultAccount","newAccount","wallet","add","privateKey","toLowerCase","Error","a"],"mappings":"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","sourcesContent":["import Web3 from 'web3'\nimport BigNumber from 'bignumber.js'\nimport { Contracts } from './lib/contracts.js'\nimport { Account } from './lib/accounts.js'\nimport { EVM } from './lib/evm.js'\n\nimport { contractAddresses } from './lib/constants'\n\nexport class Sushi {\n  constructor(provider, networkId, testing, options) {\n    var realProvider\n\n    if (typeof provider === 'string') {\n      if (provider.includes('wss')) {\n        realProvider = new Web3.providers.WebsocketProvider(\n          provider,\n          options.ethereumNodeTimeout || 10000,\n        )\n      } else {\n        realProvider = new Web3.providers.HttpProvider(\n          provider,\n          options.ethereumNodeTimeout || 10000,\n        )\n      }\n    } else {\n      realProvider = provider\n    }\n\n    this.web3 = new Web3(realProvider)\n\n    if (testing) {\n      this.testing = new EVM(realProvider)\n      this.snapshot = this.testing.snapshot()\n    }\n\n    if (options.defaultAccount) {\n      this.web3.eth.defaultAccount = options.defaultAccount\n    }\n    this.contracts = new Contracts(realProvider, networkId, this.web3, options)\n    this.sushiAddress = contractAddresses.sushi[networkId]\n    this.masterChefAddress = contractAddresses.masterChef[networkId]\n    this.wethAddress = contractAddresses.weth[networkId]\n  }\n\n  async resetEVM() {\n    this.testing.resetEVM(this.snapshot)\n  }\n\n  addAccount(address, number) {\n    this.accounts.push(new Account(this.contracts, address, number))\n  }\n\n  setProvider(provider, networkId) {\n    this.web3.setProvider(provider)\n    this.contracts.setProvider(provider, networkId)\n    this.operation.setNetworkId(networkId)\n  }\n\n  setDefaultAccount(account) {\n    this.web3.eth.defaultAccount = account\n    this.contracts.setDefaultAccount(account)\n  }\n\n  getDefaultAccount() {\n    return this.web3.eth.defaultAccount\n  }\n\n  loadAccount(account) {\n    const newAccount = this.web3.eth.accounts.wallet.add(account.privateKey)\n\n    if (\n      !newAccount ||\n      (account.address &&\n        account.address.toLowerCase() !== newAccount.address.toLowerCase())\n    ) {\n      throw new Error(`Loaded account address mismatch.\n        Expected ${account.address}, got ${\n        newAccount ? newAccount.address : null\n      }`)\n    }\n  }\n\n  toBigN(a) {\n    return BigNumber(a)\n  }\n}\n"]},"metadata":{},"sourceType":"module"}