{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState, useEffect } from \"react\";\nexport default function useWindowSize() {\n  _s();\n\n  // Initialize state with undefined width/height so server and client renders match\n  // Learn more here: https://joshwcomeau.com/react/the-perils-of-rehydration/\n  var _useState = useState({\n    responsiveWidth: undefined,\n    responsiveHeight: undefined\n  }),\n      windowSize = _useState[0],\n      setWindowSize = _useState[1];\n\n  useEffect(function () {\n    // only execute all the code below in client side\n    if (true) {\n      // Handler to call on window resize\n      var handleResize = function handleResize() {\n        // Set window responsiveWidth/responsiveHeight to state\n        setWindowSize({\n          responsiveWidth: window.innerWidth,\n          responsiveHeight: window.innerHeight\n        });\n      }; // Add event listener\n\n\n      window.addEventListener(\"resize\", handleResize); // Call handler right away so state gets updated with initial window size\n\n      handleResize(); // Remove event listener on cleanup\n\n      return function () {\n        return window.removeEventListener(\"resize\", handleResize);\n      };\n    }\n  }, []); // Empty array ensures that effect is only run on mount\n\n  return windowSize;\n}\n\n_s(useWindowSize, \"aEpLiGWxN0770b8eNwYYoICZvVk=\");","map":{"version":3,"sources":["/Users/theo/frontend/hooks/useWindowSize.js"],"names":["useState","useEffect","useWindowSize","responsiveWidth","undefined","responsiveHeight","windowSize","setWindowSize","handleResize","window","innerWidth","innerHeight","addEventListener","removeEventListener"],"mappings":";;AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AAEA,eAAe,SAASC,aAAT,GAAyB;AAAA;;AACtC;AACA;AAFsC,kBAGFF,QAAQ,CAAC;AAC3CG,IAAAA,eAAe,EAAEC,SAD0B;AAE3CC,IAAAA,gBAAgB,EAAED;AAFyB,GAAD,CAHN;AAAA,MAG/BE,UAH+B;AAAA,MAGnBC,aAHmB;;AAQtCN,EAAAA,SAAS,CAAC,YAAM;AACd;AACA,cAAmC;AACjC;AADiC,UAExBO,YAFwB,GAEjC,SAASA,YAAT,GAAwB;AACtB;AACAD,QAAAA,aAAa,CAAC;AACZJ,UAAAA,eAAe,EAAEM,MAAM,CAACC,UADZ;AAEZL,UAAAA,gBAAgB,EAAEI,MAAM,CAACE;AAFb,SAAD,CAAb;AAID,OARgC,EAUjC;;;AACAF,MAAAA,MAAM,CAACG,gBAAP,CAAwB,QAAxB,EAAkCJ,YAAlC,EAXiC,CAajC;;AACAA,MAAAA,YAAY,GAdqB,CAgBjC;;AACA,aAAO;AAAA,eAAMC,MAAM,CAACI,mBAAP,CAA2B,QAA3B,EAAqCL,YAArC,CAAN;AAAA,OAAP;AACD;AACF,GArBQ,EAqBN,EArBM,CAAT,CARsC,CA6B9B;;AACR,SAAOF,UAAP;AACD;;GA/BuBJ,a","sourcesContent":["import { useState, useEffect } from \"react\";\n\nexport default function useWindowSize() {\n  // Initialize state with undefined width/height so server and client renders match\n  // Learn more here: https://joshwcomeau.com/react/the-perils-of-rehydration/\n  const [windowSize, setWindowSize] = useState({\n    responsiveWidth: undefined,\n    responsiveHeight: undefined,\n  });\n\n  useEffect(() => {\n    // only execute all the code below in client side\n    if (typeof window !== \"undefined\") {\n      // Handler to call on window resize\n      function handleResize() {\n        // Set window responsiveWidth/responsiveHeight to state\n        setWindowSize({\n          responsiveWidth: window.innerWidth,\n          responsiveHeight: window.innerHeight,\n        });\n      }\n\n      // Add event listener\n      window.addEventListener(\"resize\", handleResize);\n\n      // Call handler right away so state gets updated with initial window size\n      handleResize();\n\n      // Remove event listener on cleanup\n      return () => window.removeEventListener(\"resize\", handleResize);\n    }\n  }, []); // Empty array ensures that effect is only run on mount\n  return windowSize;\n}\n"]},"metadata":{},"sourceType":"module"}