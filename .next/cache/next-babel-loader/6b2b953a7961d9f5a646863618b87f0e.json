{"ast":null,"code":"var _jsxFileName = \"/Users/theo/frontend/hooks/useAuth.js\";\nvar __jsx = React.createElement;\nimport React, { useState, useEffect, useContext, createContext } from \"react\";\nimport * as firebase from \"firebase/app\";\nimport \"firebase/auth\"; // Add your Firebase credentials\n\nif (!firebase.apps.length) {\n  firebase.initializeApp({\n    apiKey: \"AIzaSyBhQeedUs3K4tAGnhVzJA-uuq1xqiZpAwU\",\n    authDomain: \"genesisstaking-d98d9.firebaseapp.com\",\n    databaseURL: \"https://genesisstaking-d98d9.firebaseio.com\",\n    projectId: \"genesisstaking-d98d9\",\n    storageBucket: \"genesisstaking-d98d9.appspot.com\",\n    messagingSenderId: \"182089127473\",\n    appId: \"1:182089127473:web:c3b177e46f9a3490e22710\",\n    measurementId: \"G-5Z0BJV7RVL\"\n  });\n}\n\nconst authContext = /*#__PURE__*/createContext(); // Provider component that wraps your app and makes auth object ...\n// ... available to any child component that calls useAuth().\n\nexport function ProvideAuth({\n  children\n}) {\n  const auth = useProvideAuth();\n  return __jsx(authContext.Provider, {\n    value: auth,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 10\n    }\n  }, children);\n} // Hook for child components to get the auth object ...\n// ... and re-render when it changes.\n\nexport const useAuth = () => {\n  return useContext(authContext);\n}; // Provider hook that creates auth object and handles state\n\nfunction useProvideAuth() {\n  const {\n    0: user,\n    1: setUser\n  } = useState(null); // Wrap any Firebase methods we want to use making sure ...\n  // ... to save the user to state.\n\n  const signin = (email, password) => {\n    return firebase.auth().signInWithEmailAndPassword(email, password).then(response => {\n      setUser(response.user);\n      return response.user;\n    });\n  };\n\n  const signup = (email, password) => {\n    return firebase.auth().createUserWithEmailAndPassword(email, password).then(response => {\n      setUser(response.user);\n      return response.user;\n    });\n  };\n\n  const signout = () => {\n    return firebase.auth().signOut().then(() => {\n      setUser(false);\n    });\n  };\n\n  const sendPasswordResetEmail = email => {\n    return firebase.auth().sendPasswordResetEmail(email).then(() => {\n      return true;\n    });\n  };\n\n  const confirmPasswordReset = (code, password) => {\n    return firebase.auth().confirmPasswordReset(code, password).then(() => {\n      return true;\n    });\n  }; // Subscribe to user on mount\n  // Because this sets state in the callback it will cause any ...\n  // ... component that utilizes this hook to re-render with the ...\n  // ... latest auth object.\n\n\n  useEffect(() => {\n    const unsubscribe = firebase.auth().onAuthStateChanged(user => {\n      if (user) {\n        setUser(user);\n      } else {\n        setUser(false);\n      }\n    }); // Cleanup subscription on unmount\n\n    return () => unsubscribe();\n  }, []); // Return the user object and auth methods\n\n  return {\n    user,\n    signin,\n    signup,\n    signout,\n    sendPasswordResetEmail,\n    confirmPasswordReset\n  };\n}","map":{"version":3,"sources":["/Users/theo/frontend/hooks/useAuth.js"],"names":["React","useState","useEffect","useContext","createContext","firebase","apps","length","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","authContext","ProvideAuth","children","auth","useProvideAuth","useAuth","user","setUser","signin","email","password","signInWithEmailAndPassword","then","response","signup","createUserWithEmailAndPassword","signout","signOut","sendPasswordResetEmail","confirmPasswordReset","code","unsubscribe","onAuthStateChanged"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useContext, createContext } from \"react\";\nimport * as firebase from \"firebase/app\";\nimport \"firebase/auth\";\n\n// Add your Firebase credentials\nif (!firebase.apps.length) {\n  firebase.initializeApp({\n    apiKey: \"AIzaSyBhQeedUs3K4tAGnhVzJA-uuq1xqiZpAwU\",\n    authDomain: \"genesisstaking-d98d9.firebaseapp.com\",\n    databaseURL: \"https://genesisstaking-d98d9.firebaseio.com\",\n    projectId: \"genesisstaking-d98d9\",\n    storageBucket: \"genesisstaking-d98d9.appspot.com\",\n    messagingSenderId: \"182089127473\",\n    appId: \"1:182089127473:web:c3b177e46f9a3490e22710\",\n    measurementId: \"G-5Z0BJV7RVL\"\n  });\n}\n\nconst authContext = createContext();\n\n// Provider component that wraps your app and makes auth object ...\n// ... available to any child component that calls useAuth().\nexport function ProvideAuth({ children }) {\n  const auth = useProvideAuth();\n  return <authContext.Provider value={auth}>{children}</authContext.Provider>;\n}\n\n// Hook for child components to get the auth object ...\n// ... and re-render when it changes.\nexport const useAuth = () => {\n  return useContext(authContext);\n};\n\n// Provider hook that creates auth object and handles state\nfunction useProvideAuth() {\n  const [user, setUser] = useState(null);\n\n  // Wrap any Firebase methods we want to use making sure ...\n  // ... to save the user to state.\n  const signin = (email, password) => {\n    return firebase\n      .auth()\n      .signInWithEmailAndPassword(email, password)\n      .then(response => {\n        setUser(response.user);\n        return response.user;\n      });\n  };\n\n  const signup = (email, password) => {\n    return firebase\n      .auth()\n      .createUserWithEmailAndPassword(email, password)\n      .then(response => {\n        setUser(response.user);\n        return response.user;\n      });\n  };\n\n  const signout = () => {\n    return firebase\n      .auth()\n      .signOut()\n      .then(() => {\n        setUser(false);\n      });\n  };\n\n  const sendPasswordResetEmail = email => {\n    return firebase\n      .auth()\n      .sendPasswordResetEmail(email)\n      .then(() => {\n        return true;\n      });\n  };\n\n  const confirmPasswordReset = (code, password) => {\n    return firebase\n      .auth()\n      .confirmPasswordReset(code, password)\n      .then(() => {\n        return true;\n      });\n  };\n\n  // Subscribe to user on mount\n  // Because this sets state in the callback it will cause any ...\n  // ... component that utilizes this hook to re-render with the ...\n  // ... latest auth object.\n  useEffect(() => {\n    const unsubscribe = firebase.auth().onAuthStateChanged(user => {\n      if (user) {\n        setUser(user);\n      } else {\n        setUser(false);\n      }\n    });\n\n    // Cleanup subscription on unmount\n    return () => unsubscribe();\n  }, []);\n\n  // Return the user object and auth methods\n  return {\n    user,\n    signin,\n    signup,\n    signout,\n    sendPasswordResetEmail,\n    confirmPasswordReset\n  };\n}\n"]},"metadata":{},"sourceType":"module"}