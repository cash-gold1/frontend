{"ast":null,"code":"import { useEffect, useState } from \"react\";\nimport Web3 from \"web3\";\nimport { useWallet } from \"use-wallet\";\n\nconst useBlock = () => {\n  const {\n    0: block,\n    1: setBlock\n  } = useState(0);\n  const {\n    ethereum\n  } = useWallet();\n  useEffect(() => {\n    if (!ethereum) return;\n    const web3 = new Web3(ethereum);\n    const interval = setInterval(async () => {\n      const latestBlockNumber = await web3.eth.getBlockNumber();\n\n      if (block !== latestBlockNumber) {\n        setBlock(latestBlockNumber);\n      }\n    }, 1000);\n    return () => clearInterval(interval);\n  }, [ethereum]);\n  return block;\n};\n\nexport default useBlock;","map":{"version":3,"sources":["/Users/theo/frontend/hooks/useBlock.ts"],"names":["useEffect","useState","Web3","useWallet","useBlock","block","setBlock","ethereum","web3","interval","setInterval","latestBlockNumber","eth","getBlockNumber","clearInterval"],"mappings":"AAAA,SAAsBA,SAAtB,EAAiCC,QAAjC,QAAiD,OAAjD;AACA,OAAOC,IAAP,MAAiB,MAAjB;AACA,SAASC,SAAT,QAA0B,YAA1B;;AAIA,MAAMC,QAAQ,GAAG,MAAM;AACrB,QAAM;AAAA,OAACC,KAAD;AAAA,OAAQC;AAAR,MAAoBL,QAAQ,CAAC,CAAD,CAAlC;AACA,QAAM;AAAEM,IAAAA;AAAF,MAAkCJ,SAAS,EAAjD;AAEAH,EAAAA,SAAS,CAAC,MAAM;AACd,QAAI,CAACO,QAAL,EAAe;AACf,UAAMC,IAAI,GAAG,IAAIN,IAAJ,CAASK,QAAT,CAAb;AAEA,UAAME,QAAQ,GAAGC,WAAW,CAAC,YAAY;AACvC,YAAMC,iBAAiB,GAAG,MAAMH,IAAI,CAACI,GAAL,CAASC,cAAT,EAAhC;;AACA,UAAIR,KAAK,KAAKM,iBAAd,EAAiC;AAC/BL,QAAAA,QAAQ,CAACK,iBAAD,CAAR;AACD;AACF,KAL2B,EAKzB,IALyB,CAA5B;AAOA,WAAO,MAAMG,aAAa,CAACL,QAAD,CAA1B;AACD,GAZQ,EAYN,CAACF,QAAD,CAZM,CAAT;AAcA,SAAOF,KAAP;AACD,CAnBD;;AAqBA,eAAeD,QAAf","sourcesContent":["import { useCallback, useEffect, useState } from \"react\";\nimport Web3 from \"web3\";\nimport { useWallet } from \"use-wallet\";\n\ndeclare const window: any;\n\nconst useBlock = () => {\n  const [block, setBlock] = useState(0);\n  const { ethereum }: { ethereum: any } = useWallet();\n\n  useEffect(() => {\n    if (!ethereum) return;\n    const web3 = new Web3(ethereum);\n\n    const interval = setInterval(async () => {\n      const latestBlockNumber = await web3.eth.getBlockNumber();\n      if (block !== latestBlockNumber) {\n        setBlock(latestBlockNumber);\n      }\n    }, 1000);\n\n    return () => clearInterval(interval);\n  }, [ethereum]);\n\n  return block;\n};\n\nexport default useBlock;\n"]},"metadata":{},"sourceType":"module"}