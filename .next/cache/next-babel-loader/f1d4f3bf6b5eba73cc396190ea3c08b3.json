{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\n\nvar _s = $RefreshSig$();\n\nimport { useCallback, useEffect, useState } from \"react\";\nimport { useWallet } from \"use-wallet\";\nimport { getMasterChefContract, getWethContract, getFarms, getTotalLPWethValue } from \"../sushi/utils\";\nimport useSushi from \"./useSushi\";\nimport useBlock from \"./useBlock\";\n\nvar useAllStakedValue = function useAllStakedValue() {\n  _s();\n\n  var _useState = useState([]),\n      balances = _useState[0],\n      setBalance = _useState[1];\n\n  var _useWallet = useWallet(),\n      account = _useWallet.account;\n\n  var sushi = useSushi();\n  var farms = getFarms(sushi);\n  var masterChefContract = getMasterChefContract(sushi);\n  var wethContact = getWethContract(sushi);\n  var block = useBlock();\n  var fetchAllStakedValue = useCallback( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n    var balances;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return Promise.all(farms.map(function (_ref2) {\n              var pid = _ref2.pid,\n                  lpContract = _ref2.lpContract,\n                  tokenContract = _ref2.tokenContract;\n              return getTotalLPWethValue(masterChefContract, wethContact, lpContract, tokenContract, pid);\n            }));\n\n          case 2:\n            balances = _context.sent;\n            setBalance(balances);\n\n          case 4:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  })), [account, masterChefContract, sushi]);\n  useEffect(function () {\n    if (account && masterChefContract && sushi) {\n      fetchAllStakedValue();\n    }\n  }, [account, block, masterChefContract, setBalance, sushi]);\n  return balances;\n};\n\n_s(useAllStakedValue, \"s2ubOAfD0qf4st9fbtL9vHoaMIM=\", false, function () {\n  return [useWallet, useSushi, useBlock];\n});\n\nexport default useAllStakedValue;","map":{"version":3,"sources":["/Users/theo/frontend/hooks/useAllStakedValue.ts"],"names":["useCallback","useEffect","useState","useWallet","getMasterChefContract","getWethContract","getFarms","getTotalLPWethValue","useSushi","useBlock","useAllStakedValue","balances","setBalance","account","sushi","farms","masterChefContract","wethContact","block","fetchAllStakedValue","Promise","all","map","pid","lpContract","tokenContract"],"mappings":";;;;;AAAA,SAASA,WAAT,EAAsBC,SAAtB,EAAiCC,QAAjC,QAAiD,OAAjD;AAGA,SAASC,SAAT,QAA0B,YAA1B;AAGA,SACEC,qBADF,EAEEC,eAFF,EAGEC,QAHF,EAIEC,mBAJF,QAKO,gBALP;AAMA,OAAOC,QAAP,MAAqB,YAArB;AACA,OAAOC,QAAP,MAAqB,YAArB;;AAUA,IAAMC,iBAAiB,GAAG,SAApBA,iBAAoB,GAAM;AAAA;;AAAA,kBACCR,QAAQ,CAAC,EAAD,CADT;AAAA,MACvBS,QADuB;AAAA,MACbC,UADa;;AAAA,mBAE0BT,SAAS,EAFnC;AAAA,MAEtBU,OAFsB,cAEtBA,OAFsB;;AAG9B,MAAMC,KAAK,GAAGN,QAAQ,EAAtB;AACA,MAAMO,KAAK,GAAGT,QAAQ,CAACQ,KAAD,CAAtB;AACA,MAAME,kBAAkB,GAAGZ,qBAAqB,CAACU,KAAD,CAAhD;AACA,MAAMG,WAAW,GAAGZ,eAAe,CAACS,KAAD,CAAnC;AACA,MAAMI,KAAK,GAAGT,QAAQ,EAAtB;AAEA,MAAMU,mBAAmB,GAAGnB,WAAW,wEAAC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACKoB,OAAO,CAACC,GAAR,CACzCN,KAAK,CAACO,GAAN,CACE;AAAA,kBACEC,GADF,SACEA,GADF;AAAA,kBAEEC,UAFF,SAEEA,UAFF;AAAA,kBAGEC,aAHF,SAGEA,aAHF;AAAA,qBASElB,mBAAmB,CACjBS,kBADiB,EAEjBC,WAFiB,EAGjBO,UAHiB,EAIjBC,aAJiB,EAKjBF,GALiB,CATrB;AAAA,aADF,CADyC,CADL;;AAAA;AAChCZ,YAAAA,QADgC;AAsBtCC,YAAAA,UAAU,CAACD,QAAD,CAAV;;AAtBsC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAD,IAuBpC,CAACE,OAAD,EAAUG,kBAAV,EAA8BF,KAA9B,CAvBoC,CAAvC;AAyBAb,EAAAA,SAAS,CAAC,YAAM;AACd,QAAIY,OAAO,IAAIG,kBAAX,IAAiCF,KAArC,EAA4C;AAC1CK,MAAAA,mBAAmB;AACpB;AACF,GAJQ,EAIN,CAACN,OAAD,EAAUK,KAAV,EAAiBF,kBAAjB,EAAqCJ,UAArC,EAAiDE,KAAjD,CAJM,CAAT;AAMA,SAAOH,QAAP;AACD,CAzCD;;GAAMD,iB;UAEoDP,S,EAC1CK,Q,EAIAC,Q;;;AAoChB,eAAeC,iBAAf","sourcesContent":["import { useCallback, useEffect, useState } from \"react\";\n\nimport BigNumber from \"bignumber.js\";\nimport { useWallet } from \"use-wallet\";\nimport { Contract } from \"web3-eth-contract\";\n\nimport {\n  getMasterChefContract,\n  getWethContract,\n  getFarms,\n  getTotalLPWethValue,\n} from \"../sushi/utils\";\nimport useSushi from \"./useSushi\";\nimport useBlock from \"./useBlock\";\n\nexport interface StakedValue {\n  tokenAmount: BigNumber;\n  wethAmount: BigNumber;\n  totalWethValue: BigNumber;\n  tokenPriceInWeth: BigNumber;\n  poolWeight: BigNumber;\n}\n\nconst useAllStakedValue = () => {\n  const [balances, setBalance] = useState([] as Array<StakedValue>);\n  const { account }: { account: string; ethereum: any } = useWallet();\n  const sushi = useSushi();\n  const farms = getFarms(sushi);\n  const masterChefContract = getMasterChefContract(sushi);\n  const wethContact = getWethContract(sushi);\n  const block = useBlock();\n\n  const fetchAllStakedValue = useCallback(async () => {\n    const balances: Array<StakedValue> = await Promise.all(\n      farms.map(\n        ({\n          pid,\n          lpContract,\n          tokenContract,\n        }: {\n          pid: number;\n          lpContract: Contract;\n          tokenContract: Contract;\n        }) =>\n          getTotalLPWethValue(\n            masterChefContract,\n            wethContact,\n            lpContract,\n            tokenContract,\n            pid\n          )\n      )\n    );\n\n    setBalance(balances);\n  }, [account, masterChefContract, sushi]);\n\n  useEffect(() => {\n    if (account && masterChefContract && sushi) {\n      fetchAllStakedValue();\n    }\n  }, [account, block, masterChefContract, setBalance, sushi]);\n\n  return balances;\n};\n\nexport default useAllStakedValue;\n"]},"metadata":{},"sourceType":"module"}