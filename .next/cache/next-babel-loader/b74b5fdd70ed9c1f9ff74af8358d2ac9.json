{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\n\nvar _s = $RefreshSig$();\n\nimport { useCallback, useEffect, useState } from \"react\";\nimport BigNumber from \"bignumber.js\";\nimport useSushi from \"./useSushi\";\nimport { useWallet } from \"use-wallet\";\nimport { getAllowance } from \"../utils/erc20\";\nimport { getMasterChefContract } from \"../sushi/utils\";\n\nvar useAllowance = function useAllowance(lpContract) {\n  _s();\n\n  var _useState = useState(new BigNumber(0)),\n      allowance = _useState[0],\n      setAllowance = _useState[1];\n\n  var _useWallet = useWallet(),\n      account = _useWallet.account;\n\n  var sushi = useSushi();\n  var masterChefContract = getMasterChefContract(sushi);\n  var fetchAllowance = useCallback( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n    var allowance;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return getAllowance(lpContract, account, masterChefContract.options.address);\n\n          case 2:\n            allowance = _context.sent;\n            setAllowance(new BigNumber(allowance));\n\n          case 4:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  })), [account, masterChefContract, lpContract]);\n  useEffect(function () {\n    if (account && masterChefContract && lpContract) {\n      fetchAllowance();\n    }\n\n    var refreshInterval = setInterval(fetchAllowance, 10000);\n    return function () {\n      return clearInterval(refreshInterval);\n    };\n  }, [account, masterChefContract, lpContract]);\n  return allowance;\n};\n\n_s(useAllowance, \"gcaBkhWNpOEOoQF8Pg3QQPJGArc=\", false, function () {\n  return [useWallet, useSushi];\n});\n\nexport default useAllowance;","map":{"version":3,"sources":["/Users/theo/frontend/hooks/useAllowance.ts"],"names":["useCallback","useEffect","useState","BigNumber","useSushi","useWallet","getAllowance","getMasterChefContract","useAllowance","lpContract","allowance","setAllowance","account","sushi","masterChefContract","fetchAllowance","options","address","refreshInterval","setInterval","clearInterval"],"mappings":";;;;;AAAA,SAASA,WAAT,EAAsBC,SAAtB,EAAiCC,QAAjC,QAAiD,OAAjD;AAEA,OAAOC,SAAP,MAAsB,cAAtB;AACA,OAAOC,QAAP,MAAqB,YAArB;AACA,SAASC,SAAT,QAA0B,YAA1B;AAGA,SAASC,YAAT,QAA6B,gBAA7B;AACA,SAASC,qBAAT,QAAsC,gBAAtC;;AAEA,IAAMC,YAAY,GAAG,SAAfA,YAAe,CAACC,UAAD,EAA0B;AAAA;;AAAA,kBACXP,QAAQ,CAAC,IAAIC,SAAJ,CAAc,CAAd,CAAD,CADG;AAAA,MACtCO,SADsC;AAAA,MAC3BC,YAD2B;;AAAA,mBAEWN,SAAS,EAFpB;AAAA,MAErCO,OAFqC,cAErCA,OAFqC;;AAG7C,MAAMC,KAAK,GAAGT,QAAQ,EAAtB;AACA,MAAMU,kBAAkB,GAAGP,qBAAqB,CAACM,KAAD,CAAhD;AAEA,MAAME,cAAc,GAAGf,WAAW,wEAAC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACTM,YAAY,CAClCG,UADkC,EAElCG,OAFkC,EAGlCE,kBAAkB,CAACE,OAAnB,CAA2BC,OAHO,CADH;;AAAA;AAC3BP,YAAAA,SAD2B;AAMjCC,YAAAA,YAAY,CAAC,IAAIR,SAAJ,CAAcO,SAAd,CAAD,CAAZ;;AANiC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAD,IAO/B,CAACE,OAAD,EAAUE,kBAAV,EAA8BL,UAA9B,CAP+B,CAAlC;AASAR,EAAAA,SAAS,CAAC,YAAM;AACd,QAAIW,OAAO,IAAIE,kBAAX,IAAiCL,UAArC,EAAiD;AAC/CM,MAAAA,cAAc;AACf;;AACD,QAAIG,eAAe,GAAGC,WAAW,CAACJ,cAAD,EAAiB,KAAjB,CAAjC;AACA,WAAO;AAAA,aAAMK,aAAa,CAACF,eAAD,CAAnB;AAAA,KAAP;AACD,GANQ,EAMN,CAACN,OAAD,EAAUE,kBAAV,EAA8BL,UAA9B,CANM,CAAT;AAQA,SAAOC,SAAP;AACD,CAxBD;;GAAMF,Y;UAEoDH,S,EAC1CD,Q;;;AAuBhB,eAAeI,YAAf","sourcesContent":["import { useCallback, useEffect, useState } from \"react\";\n\nimport BigNumber from \"bignumber.js\";\nimport useSushi from \"./useSushi\";\nimport { useWallet } from \"use-wallet\";\nimport { Contract } from \"web3-eth-contract\";\n\nimport { getAllowance } from \"../utils/erc20\";\nimport { getMasterChefContract } from \"../sushi/utils\";\n\nconst useAllowance = (lpContract: Contract) => {\n  const [allowance, setAllowance] = useState(new BigNumber(0));\n  const { account }: { account: string; ethereum: any } = useWallet();\n  const sushi = useSushi();\n  const masterChefContract = getMasterChefContract(sushi);\n\n  const fetchAllowance = useCallback(async () => {\n    const allowance = await getAllowance(\n      lpContract,\n      account,\n      masterChefContract.options.address\n    );\n    setAllowance(new BigNumber(allowance));\n  }, [account, masterChefContract, lpContract]);\n\n  useEffect(() => {\n    if (account && masterChefContract && lpContract) {\n      fetchAllowance();\n    }\n    let refreshInterval = setInterval(fetchAllowance, 10000);\n    return () => clearInterval(refreshInterval);\n  }, [account, masterChefContract, lpContract]);\n\n  return allowance;\n};\n\nexport default useAllowance;\n"]},"metadata":{},"sourceType":"module"}