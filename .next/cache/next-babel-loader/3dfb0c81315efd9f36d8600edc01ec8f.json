{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\n\nvar _s = $RefreshSig$();\n\nimport { useCallback, useEffect, useState } from \"react\";\nimport BigNumber from \"bignumber.js\";\nimport { useWallet } from \"use-wallet\";\nimport { getBalance } from \"../utils/erc20\";\nimport useBlock from \"./useBlock\";\n\nvar useTokenBalance = function useTokenBalance(tokenAddress) {\n  _s();\n\n  var _useState = useState(new BigNumber(0)),\n      balance = _useState[0],\n      setBalance = _useState[1];\n\n  var _useWallet = useWallet(),\n      account = _useWallet.account,\n      ethereum = _useWallet.ethereum;\n\n  var block = useBlock();\n  var fetchBalance = useCallback( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n    var balance;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return getBalance(ethereum, tokenAddress, account);\n\n          case 2:\n            balance = _context.sent;\n            setBalance(new BigNumber(balance));\n\n          case 4:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  })), [account, ethereum, tokenAddress]);\n  useEffect(function () {\n    if (account && ethereum) {\n      fetchBalance();\n    }\n  }, [account, ethereum, setBalance, block, tokenAddress]);\n  return balance;\n};\n\n_s(useTokenBalance, \"xq13qtH571thaLlu71DKi7xYdb8=\", false, function () {\n  return [useWallet, useBlock];\n});\n\nexport default useTokenBalance;","map":{"version":3,"sources":["/Users/theo/frontend/hooks/useTokenBalance.ts"],"names":["useCallback","useEffect","useState","BigNumber","useWallet","getBalance","useBlock","useTokenBalance","tokenAddress","balance","setBalance","account","ethereum","block","fetchBalance"],"mappings":";;;;;AAAA,SAASA,WAAT,EAAsBC,SAAtB,EAAiCC,QAAjC,QAAiD,OAAjD;AAEA,OAAOC,SAAP,MAAsB,cAAtB;AACA,SAASC,SAAT,QAA0B,YAA1B;AAEA,SAASC,UAAT,QAA2B,gBAA3B;AACA,OAAOC,QAAP,MAAqB,YAArB;;AAEA,IAAMC,eAAe,GAAG,SAAlBA,eAAkB,CAACC,YAAD,EAA0B;AAAA;;AAAA,kBAClBN,QAAQ,CAAC,IAAIC,SAAJ,CAAc,CAAd,CAAD,CADU;AAAA,MACzCM,OADyC;AAAA,MAChCC,UADgC;;AAAA,mBAEkBN,SAAS,EAF3B;AAAA,MAExCO,OAFwC,cAExCA,OAFwC;AAAA,MAE/BC,QAF+B,cAE/BA,QAF+B;;AAGhD,MAAMC,KAAK,GAAGP,QAAQ,EAAtB;AAEA,MAAMQ,YAAY,GAAGd,WAAW,wEAAC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACTK,UAAU,CAACO,QAAD,EAAWJ,YAAX,EAAyBG,OAAzB,CADD;;AAAA;AACzBF,YAAAA,OADyB;AAE/BC,YAAAA,UAAU,CAAC,IAAIP,SAAJ,CAAcM,OAAd,CAAD,CAAV;;AAF+B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAD,IAG7B,CAACE,OAAD,EAAUC,QAAV,EAAoBJ,YAApB,CAH6B,CAAhC;AAKAP,EAAAA,SAAS,CAAC,YAAM;AACd,QAAIU,OAAO,IAAIC,QAAf,EAAyB;AACvBE,MAAAA,YAAY;AACb;AACF,GAJQ,EAIN,CAACH,OAAD,EAAUC,QAAV,EAAoBF,UAApB,EAAgCG,KAAhC,EAAuCL,YAAvC,CAJM,CAAT;AAMA,SAAOC,OAAP;AACD,CAjBD;;GAAMF,e;UAE8DH,S,EACpDE,Q;;;AAgBhB,eAAeC,eAAf","sourcesContent":["import { useCallback, useEffect, useState } from \"react\";\n\nimport BigNumber from \"bignumber.js\";\nimport { useWallet } from \"use-wallet\";\n\nimport { getBalance } from \"../utils/erc20\";\nimport useBlock from \"./useBlock\";\n\nconst useTokenBalance = (tokenAddress: string) => {\n  const [balance, setBalance] = useState(new BigNumber(0));\n  const { account, ethereum }: { account: string; ethereum: any } = useWallet();\n  const block = useBlock();\n\n  const fetchBalance = useCallback(async () => {\n    const balance = await getBalance(ethereum, tokenAddress, account);\n    setBalance(new BigNumber(balance));\n  }, [account, ethereum, tokenAddress]);\n\n  useEffect(() => {\n    if (account && ethereum) {\n      fetchBalance();\n    }\n  }, [account, ethereum, setBalance, block, tokenAddress]);\n\n  return balance;\n};\n\nexport default useTokenBalance;\n"]},"metadata":{},"sourceType":"module"}