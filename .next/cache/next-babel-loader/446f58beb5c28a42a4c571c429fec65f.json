{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\n\nvar _jsxFileName = \"/Users/theo/frontend/pages/dashboard.js\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport React, { useEffect, useState } from \"react\";\nimport WalletConnect from \"@walletconnect/client\";\nimport QRCodeModal from \"@walletconnect/qrcode-modal\";\nimport Web3 from \"web3\";\nimport Head from \"next/head\";\nimport numbro from \"numbro\";\nimport Loader from \"react-loader-spinner\";\nimport { useWallet } from \"use-wallet\";\nimport useWindowSize from \"../hooks/useWindowSize\";\nimport useTokenBalance from \"../hooks/useTokenBalance\";\nimport useSushi from \"../hooks/useSushi\";\nimport Layout from \"../components/layout\";\nimport LayoutDashboard from \"../components/layoutDashboard\";\nimport CustomChart from \"../components/customChart\";\nimport { getBalanceNumber } from \"../utils/formatBalance\";\nimport { contractAddresses, supportedPools } from \"../sushi/lib/constants\";\nimport { getSushiAddress, getSushiSupply, getMasterChefContract } from \"../sushi/utils\";\nimport ColorGuide from \"../styles/colorGuide\";\nexport default function Dashboard() {\n  _s();\n\n  var _this = this;\n\n  var sushi = useSushi();\n\n  var _useWindowSize = useWindowSize(),\n      responsiveWidth = _useWindowSize.responsiveWidth,\n      responsiveHeight = _useWindowSize.responsiveHeight;\n\n  var _useWallet = useWallet(),\n      account = _useWallet.account,\n      balance = _useWallet.balance,\n      connect = _useWallet.connect,\n      chainId = _useWallet.chainId,\n      status = _useWallet.status;\n\n  var isMobileLayout = responsiveWidth < 650;\n\n  var _useState = useState(false),\n      loading = _useState[0],\n      setLoading = _useState[1];\n\n  var _useState2 = useState([]),\n      assets = _useState2[0],\n      setAssets = _useState2[1];\n\n  var _useState3 = useState(0),\n      totalSupply = _useState3[0],\n      setTotalSupply = _useState3[1];\n\n  var genesisTokenBalance = useTokenBalance(getSushiAddress(sushi));\n  useEffect(function () {\n    function fetchTotalSupply() {\n      return _fetchTotalSupply.apply(this, arguments);\n    }\n\n    function _fetchTotalSupply() {\n      _fetchTotalSupply = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        var supply;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return getSushiSupply(sushi);\n\n              case 2:\n                supply = _context.sent;\n                setTotalSupply(supply);\n\n              case 4:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n      return _fetchTotalSupply.apply(this, arguments);\n    }\n\n    if (sushi) {\n      fetchTotalSupply();\n    }\n  }, [sushi, setTotalSupply]);\n  var keyIndicatorsList = [{\n    title: \"Total GT supply\",\n    value: totalSupply ? \"\".concat(numbro(getBalanceNumber(totalSupply || 0)).format({\n      spaceSeparated: true,\n      thousandSeparated: true,\n      mantissa: 0\n    })) : 0\n  }, {\n    title: \"Your GT earnings\",\n    value: \"\".concat(numbro(getBalanceNumber(genesisTokenBalance || 0)).format({\n      spaceSeparated: true,\n      thousandSeparated: true,\n      mantissa: 2\n    }))\n  }];\n  return __jsx(Layout, {\n    pageTitle: \"Mon dashboard\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 5\n    }\n  }, __jsx(LayoutDashboard, {\n    currentTabIndex: 0,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }\n  }, __jsx(\"div\", {\n    className: \"containerSpaceBetween\",\n    style: {\n      flexDirection: \"row\",\n      marginBottom: 20\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 9\n    }\n  }, keyIndicatorsList.map(function (_ref, index) {\n    var title = _ref.title,\n        value = _ref.value;\n    return __jsx(\"div\", {\n      className: \"containerItem containerSpaceBetween\",\n      style: {\n        padding: isMobileLayout ? 10 : responsiveWidth < 1250 ? 20 : 25,\n        width: \"42%\"\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 13\n      }\n    }, __jsx(\"div\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 15\n      }\n    }, __jsx(\"p\", {\n      style: {\n        color: ColorGuide.mainGrey\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 17\n      }\n    }, title), __jsx(\"h3\", {\n      style: {\n        marginBottom: 0\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 17\n      }\n    }, value)));\n  })), __jsx(\"p\", {\n    style: {\n      textAlign: \"center\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 9\n    }\n  }, __jsx(\"b\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 11\n    }\n  }, \"Pro Tip\"), \": boost your earnings using the GT-ETH pool!\")));\n}\n\n_s(Dashboard, \"uPLyE1oENy+vcaaKWi7AlgvA1Ek=\", false, function () {\n  return [useSushi, useWindowSize, useWallet, useTokenBalance];\n});\n\n_c = Dashboard;\n\nvar _c;\n\n$RefreshReg$(_c, \"Dashboard\");","map":{"version":3,"sources":["/Users/theo/frontend/pages/dashboard.js"],"names":["React","useEffect","useState","WalletConnect","QRCodeModal","Web3","Head","numbro","Loader","useWallet","useWindowSize","useTokenBalance","useSushi","Layout","LayoutDashboard","CustomChart","getBalanceNumber","contractAddresses","supportedPools","getSushiAddress","getSushiSupply","getMasterChefContract","ColorGuide","Dashboard","sushi","responsiveWidth","responsiveHeight","account","balance","connect","chainId","status","isMobileLayout","loading","setLoading","assets","setAssets","totalSupply","setTotalSupply","genesisTokenBalance","fetchTotalSupply","supply","keyIndicatorsList","title","value","format","spaceSeparated","thousandSeparated","mantissa","flexDirection","marginBottom","map","index","padding","width","color","mainGrey","textAlign"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport WalletConnect from \"@walletconnect/client\";\nimport QRCodeModal from \"@walletconnect/qrcode-modal\";\nimport Web3 from \"web3\";\n\nimport Head from \"next/head\";\nimport numbro from \"numbro\";\nimport Loader from \"react-loader-spinner\";\n\nimport { useWallet } from \"use-wallet\";\nimport useWindowSize from \"../hooks/useWindowSize\";\nimport useTokenBalance from \"../hooks/useTokenBalance\";\nimport useSushi from \"../hooks/useSushi\";\n\nimport Layout from \"../components/layout\";\nimport LayoutDashboard from \"../components/layoutDashboard\";\nimport CustomChart from \"../components/customChart\";\n\nimport { getBalanceNumber } from \"../utils/formatBalance\";\nimport { contractAddresses, supportedPools } from \"../sushi/lib/constants\";\nimport {\n  getSushiAddress,\n  getSushiSupply,\n  getMasterChefContract,\n} from \"../sushi/utils\";\n\nimport ColorGuide from \"../styles/colorGuide\";\n\nexport default function Dashboard() {\n  const sushi = useSushi();\n\n  const { responsiveWidth, responsiveHeight } = useWindowSize();\n  const { account, balance, connect, chainId, status } = useWallet();\n\n  const isMobileLayout = responsiveWidth < 650;\n\n  const [loading, setLoading] = useState(false);\n  const [assets, setAssets] = useState([]);\n  const [totalSupply, setTotalSupply] = useState(0);\n\n  const genesisTokenBalance = useTokenBalance(getSushiAddress(sushi));\n\n  useEffect(() => {\n    async function fetchTotalSupply() {\n      const supply = await getSushiSupply(sushi);\n      setTotalSupply(supply);\n    }\n\n    if (sushi) {\n      fetchTotalSupply();\n    }\n  }, [sushi, setTotalSupply]);\n\n  const keyIndicatorsList = [\n    {\n      title: \"Total GT supply\",\n      value: totalSupply\n        ? `${numbro(getBalanceNumber(totalSupply || 0)).format({\n            spaceSeparated: true,\n            thousandSeparated: true,\n            mantissa: 0,\n          })}`\n        : 0,\n    },\n    {\n      title: \"Your GT earnings\",\n      value: `${numbro(getBalanceNumber(genesisTokenBalance || 0)).format({\n        spaceSeparated: true,\n        thousandSeparated: true,\n        mantissa: 2,\n      })}`,\n    },\n  ];\n\n  return (\n    <Layout pageTitle=\"Mon dashboard\">\n      <LayoutDashboard currentTabIndex={0}>\n        <div\n          className=\"containerSpaceBetween\"\n          style={{ flexDirection: \"row\", marginBottom: 20 }}\n        >\n          {keyIndicatorsList.map(({ title, value }, index) => (\n            <div\n              className=\"containerItem containerSpaceBetween\"\n              style={{\n                padding: isMobileLayout ? 10 : responsiveWidth < 1250 ? 20 : 25,\n                width: \"42%\",\n              }}\n            >\n              <div>\n                <p style={{ color: ColorGuide.mainGrey }}>{title}</p>\n                <h3 style={{ marginBottom: 0 }}>{value}</h3>\n              </div>\n            </div>\n          ))}\n        </div>\n\n        <p style={{ textAlign: \"center\" }}>\n          <b>Pro Tip</b>: boost your earnings using the GT-ETH pool!\n        </p>\n      </LayoutDashboard>\n    </Layout>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}