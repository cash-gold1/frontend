{"ast":null,"code":"import _taggedTemplateLiteral from \"@babel/runtime/helpers/esm/taggedTemplateLiteral\";\n\nvar _this = this,\n    _jsxFileName = \"/Users/theo/genesis/contexts/Modals/Modals.tsx\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\n\nfunction _templateObject2() {\n  var data = _taggedTemplateLiteral([\"\\n  background-color: \", \"aa;\\n  position: absolute;\\n  top: 0; right: 0; bottom: 0; left: 0;\\n\"]);\n\n  _templateObject2 = function _templateObject2() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n  align-items: center;\\n  display: flex;\\n  flex-direction: column;\\n  justify-content: center;\\n  position: fixed;\\n  top: 0; right: 0; bottom: 0; left: 0;\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport React, { createContext, useCallback, useState } from 'react';\nimport styled from 'styled-components';\nexport var Context = /*#__PURE__*/createContext({\n  onPresent: function onPresent() {},\n  onDismiss: function onDismiss() {}\n});\n\nvar Modals = function Modals(_ref) {\n  _s();\n\n  var children = _ref.children;\n\n  var _useState = useState(false),\n      isOpen = _useState[0],\n      setIsOpen = _useState[1];\n\n  var _useState2 = useState(),\n      content = _useState2[0],\n      setContent = _useState2[1];\n\n  var _useState3 = useState(),\n      modalKey = _useState3[0],\n      setModalKey = _useState3[1];\n\n  var handlePresent = useCallback(function (modalContent, key) {\n    setModalKey(key);\n    setContent(modalContent);\n    setIsOpen(true);\n  }, [setContent, setIsOpen, setModalKey]);\n  var handleDismiss = useCallback(function () {\n    setContent(undefined);\n    setIsOpen(false);\n  }, [setContent, setIsOpen, modalKey]);\n  return __jsx(Context.Provider, {\n    value: {\n      content: content,\n      isOpen: isOpen,\n      onPresent: handlePresent,\n      onDismiss: handleDismiss\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 5\n    }\n  }, children, isOpen && __jsx(StyledModalWrapper, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 9\n    }\n  }, __jsx(StyledModalBackdrop, {\n    onClick: handleDismiss,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.isValidElement(content) && /*#__PURE__*/React.cloneElement(content, {\n    onDismiss: handleDismiss\n  })));\n};\n\n_s(Modals, \"KwiB4bsrham1DZXlwYSTW7Ear3c=\");\n\n_c = Modals;\nvar StyledModalWrapper = styled.div(_templateObject());\n_c2 = StyledModalWrapper;\nvar StyledModalBackdrop = styled.div(_templateObject2(), function (props) {\n  return props.theme.color.grey[600];\n});\n_c3 = StyledModalBackdrop;\nexport default Modals;\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"Modals\");\n$RefreshReg$(_c2, \"StyledModalWrapper\");\n$RefreshReg$(_c3, \"StyledModalBackdrop\");","map":{"version":3,"sources":["/Users/theo/genesis/contexts/Modals/Modals.tsx"],"names":["React","createContext","useCallback","useState","styled","Context","onPresent","onDismiss","Modals","children","isOpen","setIsOpen","content","setContent","modalKey","setModalKey","handlePresent","modalContent","key","handleDismiss","undefined","isValidElement","cloneElement","StyledModalWrapper","div","StyledModalBackdrop","props","theme","color","grey"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,aAAhB,EAA+BC,WAA/B,EAA4CC,QAA5C,QAA4D,OAA5D;AACA,OAAOC,MAAP,MAAmB,mBAAnB;AASA,OAAO,IAAMC,OAAO,gBAAGJ,aAAa,CAAgB;AAClDK,EAAAA,SAAS,EAAE,qBAAM,CAAE,CAD+B;AAElDC,EAAAA,SAAS,EAAE,qBAAM,CAAE;AAF+B,CAAhB,CAA7B;;AAKP,IAAMC,MAAgB,GAAG,SAAnBA,MAAmB,OAAkB;AAAA;;AAAA,MAAfC,QAAe,QAAfA,QAAe;;AAAA,kBACbN,QAAQ,CAAC,KAAD,CADK;AAAA,MAClCO,MADkC;AAAA,MAC1BC,SAD0B;;AAAA,mBAEXR,QAAQ,EAFG;AAAA,MAElCS,OAFkC;AAAA,MAEzBC,UAFyB;;AAAA,mBAGTV,QAAQ,EAHC;AAAA,MAGlCW,QAHkC;AAAA,MAGxBC,WAHwB;;AAKzC,MAAMC,aAAa,GAAGd,WAAW,CAAC,UAACe,YAAD,EAAgCC,GAAhC,EAAiD;AACjFH,IAAAA,WAAW,CAACG,GAAD,CAAX;AACAL,IAAAA,UAAU,CAACI,YAAD,CAAV;AACAN,IAAAA,SAAS,CAAC,IAAD,CAAT;AACD,GAJgC,EAI9B,CAACE,UAAD,EAAaF,SAAb,EAAwBI,WAAxB,CAJ8B,CAAjC;AAMA,MAAMI,aAAa,GAAGjB,WAAW,CAAC,YAAM;AACtCW,IAAAA,UAAU,CAACO,SAAD,CAAV;AACAT,IAAAA,SAAS,CAAC,KAAD,CAAT;AACD,GAHgC,EAG9B,CAACE,UAAD,EAAaF,SAAb,EAAwBG,QAAxB,CAH8B,CAAjC;AAKA,SACE,MAAC,OAAD,CAAS,QAAT;AAAkB,IAAA,KAAK,EAAE;AACvBF,MAAAA,OAAO,EAAPA,OADuB;AAEvBF,MAAAA,MAAM,EAANA,MAFuB;AAGvBJ,MAAAA,SAAS,EAAEU,aAHY;AAIvBT,MAAAA,SAAS,EAAEY;AAJY,KAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAMGV,QANH,EAOGC,MAAM,IACL,MAAC,kBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,mBAAD;AAAqB,IAAA,OAAO,EAAES,aAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAEG,aAAAnB,KAAK,CAACqB,cAAN,CAAqBT,OAArB,kBAAiCZ,KAAK,CAACsB,YAAN,CAAmBV,OAAnB,EAA4B;AAC5DL,IAAAA,SAAS,EAAEY;AADiD,GAA5B,CAFpC,CARJ,CADF;AAkBD,CAlCD;;GAAMX,M;;KAAAA,M;AAoCN,IAAMe,kBAAkB,GAAGnB,MAAM,CAACoB,GAAV,mBAAxB;MAAMD,kB;AASN,IAAME,mBAAmB,GAAGrB,MAAM,CAACoB,GAAV,qBACH,UAAAE,KAAK;AAAA,SAAIA,KAAK,CAACC,KAAN,CAAYC,KAAZ,CAAkBC,IAAlB,CAAuB,GAAvB,CAAJ;AAAA,CADF,CAAzB;MAAMJ,mB;AAMN,eAAejB,MAAf","sourcesContent":["import React, { createContext, useCallback, useState } from 'react'\nimport styled from 'styled-components'\n\ninterface ModalsContext {\n  content?: React.ReactNode,\n  isOpen?: boolean,\n  onPresent: (content: React.ReactNode, key?: string) => void,\n  onDismiss: () => void\n}\n\nexport const Context = createContext<ModalsContext>({\n  onPresent: () => {},\n  onDismiss: () => {},\n})\n\nconst Modals: React.FC = ({ children }) => {\n  const [isOpen, setIsOpen] = useState(false)\n  const [content, setContent] = useState<React.ReactNode>()\n  const [modalKey, setModalKey] = useState<string>()\n\n  const handlePresent = useCallback((modalContent: React.ReactNode, key?: string) => {\n    setModalKey(key)\n    setContent(modalContent)\n    setIsOpen(true)\n  }, [setContent, setIsOpen, setModalKey])\n\n  const handleDismiss = useCallback(() => {\n    setContent(undefined)\n    setIsOpen(false)\n  }, [setContent, setIsOpen, modalKey])\n\n  return (\n    <Context.Provider value={{\n      content,\n      isOpen,\n      onPresent: handlePresent,\n      onDismiss: handleDismiss,\n    }}>\n      {children}\n      {isOpen && (\n        <StyledModalWrapper>\n          <StyledModalBackdrop onClick={handleDismiss} />\n          {React.isValidElement(content) && React.cloneElement(content, {\n            onDismiss: handleDismiss,\n          })}\n        </StyledModalWrapper>\n      )}\n    </Context.Provider>\n  )\n}\n\nconst StyledModalWrapper = styled.div`\n  align-items: center;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  position: fixed;\n  top: 0; right: 0; bottom: 0; left: 0;\n`\n\nconst StyledModalBackdrop = styled.div`\n  background-color: ${props => props.theme.color.grey[600]}aa;\n  position: absolute;\n  top: 0; right: 0; bottom: 0; left: 0;\n`\n\nexport default Modals"]},"metadata":{},"sourceType":"module"}